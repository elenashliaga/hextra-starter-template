<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="ru">
  <compounddef id="class_u_pixel_streaming_client" kind="class" language="C++" prot="public">
    <compoundname>UPixelStreamingClient</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UObject</basecompoundref>
    <includes refid="_pixel_streaming_client_8h" local="no">PixelStreamingClient.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_u_pixel_streaming_client_1a65ce419ee906322a6c47e12133b48d60" prot="private" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TObjectPtr</ref>&lt; <ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref> &gt;</type>
        <definition>TObjectPtr&lt;UGameInstanceCore&gt; UPixelStreamingClient::GameInstance</definition>
        <argsstring></argsstring>
        <name>GameInstance</name>
        <qualifiedname>UPixelStreamingClient::GameInstance</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
<para>Указатель на текущий экземпляр игры. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="39" column="20" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" bodystart="39" bodyend="39"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_u_pixel_streaming_client_1a890953db10264dec85d13e76ab4bcfaf" prot="private" static="yes" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TObjectPtr</ref>&lt; <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> &gt;</type>
        <definition>TObjectPtr&lt;UPixelStreamingClient&gt; UPixelStreamingClient::Singleton</definition>
        <argsstring></argsstring>
        <name>Singleton</name>
        <qualifiedname>UPixelStreamingClient::Singleton</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="41" column="34" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" bodystart="41" bodyend="41"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_u_pixel_streaming_client_1a1be760cae0f8295fd62b6b053f74a2b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingClient::HandleIncomingInputMessage</definition>
        <argsstring>(const FString &amp;Descriptor, AJrpsPlayerController *Sender)</argsstring>
        <name>HandleIncomingInputMessage</name>
        <qualifiedname>UPixelStreamingClient::HandleIncomingInputMessage</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Descriptor</declname>
        </param>
        <param>
          <type><ref refid="class_a_jrps_player_controller" kindref="compound">AJrpsPlayerController</ref> *</type>
          <declname>Sender</declname>
        </param>
        <briefdescription>
<para>Обрабатывает входящее сообщение ввода. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за обработку входящих сообщений ввода от MetaPixelStreamingInput. Он анализирует сообщение ввода, проверяет, что MethodHandler действителен, и затем вызывает метод handleRequest из MethodHandler с разобранным JSON-объектом.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>Строка дескриптора входящего сообщения ввода. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Sender</parametername>
</parameternamelist>
<parameterdescription>
<para>Отправитель. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="55" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingClient.cpp" bodystart="44" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_client_1a67c28607a6434a62b89db03bd272e56d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref> *</type>
        <definition>UGameInstanceCore * UPixelStreamingClient::GetGameInstance</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetGameInstance</name>
        <qualifiedname>UPixelStreamingClient::GetGameInstance</qualifiedname>
        <briefdescription>
<para>Получает игровой инстанс, связанный с <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод возвращает игровой инстанс, который связан с <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>.</para>
<para><simplesect kind="return"><para>Игровой инстанс, связанный с <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="106" column="27" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingClient.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_client_1ab84d8e00c8badb67489f382a7b1b1b30" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UWorld</ref> *</type>
        <definition>UWorld * UPixelStreamingClient::GetWorld</definition>
        <argsstring>() const override</argsstring>
        <name>GetWorld</name>
        <qualifiedname>UPixelStreamingClient::GetWorld</qualifiedname>
        <briefdescription>
<para>Получить объект UWorld, связанный с текущим экземпляром игры. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод возвращает объект UWorld, связанный с текущим экземпляром игры.</para>
<para><simplesect kind="return"><para>Объект UWorld, связанный с текущим экземпляром игры. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="115" column="24" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingClient.cpp" bodystart="39" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_client_1ae4ab3a5795d7c503cc4bb439c8511cea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingClient::SendRpcObject</definition>
        <argsstring>(const FJsonRpcObject &amp;Object, AJrpsPlayerController *Recipient) const</argsstring>
        <name>SendRpcObject</name>
        <qualifiedname>UPixelStreamingClient::SendRpcObject</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_json_rpc_object" kindref="compound">FJsonRpcObject</ref> &amp;</type>
          <declname>Object</declname>
        </param>
        <param>
          <type><ref refid="class_a_jrps_player_controller" kindref="compound">AJrpsPlayerController</ref> *</type>
          <declname>Recipient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Отправляет объект RPC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Object</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON-RPC объект для отправки. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Recipient</parametername>
</parameternamelist>
<parameterdescription>
<para>Получатель. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="125" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingClient.cpp" bodystart="68" bodyend="89"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_u_pixel_streaming_client_1ab5de29f6c46277199d6ac5c40a20cb93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> *</type>
        <definition>UPixelStreamingClient * UPixelStreamingClient::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <qualifiedname>UPixelStreamingClient::Get</qualifiedname>
        <briefdescription>
<para>Получает экземпляр <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод возвращает экземпляр <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>, если он доступен, в противном случае возвращает nullptr. Чтобы проверить доступность <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>, используйте статическую функцию <ref refid="class_u_pixel_streaming_client_1a500c9c87ebf714964f6f012feea5a427" kindref="member">IsAvailable()</ref>.</para>
<para><simplesect kind="return"><para>Экземпляр <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>, если он доступен, в противном случае nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="68" column="38" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingClient.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_client_1a651cdb4ecccdee8b95cf3facf808099b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> *</type>
        <definition>UPixelStreamingClient * UPixelStreamingClient::Create</definition>
        <argsstring>(UGameInstanceCore *InGameInstance, TSubclassOf&lt; UPixelStreamingClient &gt; Class)</argsstring>
        <name>Create</name>
        <qualifiedname>UPixelStreamingClient::Create</qualifiedname>
        <param>
          <type><ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref> *</type>
          <declname>InGameInstance</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TSubclassOf</ref>&lt; <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> &gt;</type>
          <declname>Class</declname>
        </param>
        <briefdescription>
<para>Создает экземпляр <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод создает новый экземпляр <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>, используя предоставленный <ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref> и Class.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InGameInstance</parametername>
</parameternamelist>
<parameterdescription>
<para>указатель на текущий экземпляр игры. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Class</parametername>
</parameternamelist>
<parameterdescription>
<para>UClass <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> для создания экземпляра.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>указатель на созданный экземпляр <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="81" column="38" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingClient.cpp" bodystart="22" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_client_1a500c9c87ebf714964f6f012feea5a427" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UPixelStreamingClient::IsAvailable</definition>
        <argsstring>()</argsstring>
        <name>IsAvailable</name>
        <qualifiedname>UPixelStreamingClient::IsAvailable</qualifiedname>
        <briefdescription>
<para>Проверяет доступность <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод проверяет доступность <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref>, проверяя валидность его singleton-экземпляра. Если singleton-экземпляр валиден, это означает, что <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> доступен.</para>
<para><simplesect kind="return"><para>True, если <ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> доступен, false в противном случае. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="94" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingClient.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Класс, представляющий клиента Pixel Streaming. </para>
    </briefdescription>
    <detaileddescription>
<para>Этот класс отвечает за управление коммуникацией между сервером Pixel Streaming и MetaPlayerController. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>UObject</label>
      </node>
      <node id="1">
        <label>UPixelStreamingClient</label>
        <link refid="class_u_pixel_streaming_client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>UObject</label>
      </node>
      <node id="1">
        <label>UPixelStreamingClient</label>
        <link refid="class_u_pixel_streaming_client"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" line="31" column="1" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingClient.h" bodystart="32" bodyend="126"/>
    <listofallmembers>
      <member refid="class_u_pixel_streaming_client_1a651cdb4ecccdee8b95cf3facf808099b" prot="public" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>Create</name></member>
      <member refid="class_u_pixel_streaming_client_1a65ce419ee906322a6c47e12133b48d60" prot="private" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>GameInstance</name></member>
      <member refid="class_u_pixel_streaming_client_1ab5de29f6c46277199d6ac5c40a20cb93" prot="public" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>Get</name></member>
      <member refid="class_u_pixel_streaming_client_1a67c28607a6434a62b89db03bd272e56d" prot="public" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>GetGameInstance</name></member>
      <member refid="class_u_pixel_streaming_client_1ab84d8e00c8badb67489f382a7b1b1b30" prot="public" virt="virtual"><scope>UPixelStreamingClient</scope><name>GetWorld</name></member>
      <member refid="class_u_pixel_streaming_client_1a1be760cae0f8295fd62b6b053f74a2b4" prot="public" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>HandleIncomingInputMessage</name></member>
      <member refid="class_u_pixel_streaming_client_1a500c9c87ebf714964f6f012feea5a427" prot="public" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>IsAvailable</name></member>
      <member refid="class_u_pixel_streaming_client_1ae4ab3a5795d7c503cc4bb439c8511cea" prot="public" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>SendRpcObject</name></member>
      <member refid="class_u_pixel_streaming_client_1a890953db10264dec85d13e76ab4bcfaf" prot="private" virt="non-virtual"><scope>UPixelStreamingClient</scope><name>Singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
