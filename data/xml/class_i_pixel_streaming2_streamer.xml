<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="ru">
  <compounddef id="class_i_pixel_streaming2_streamer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>IPixelStreaming2Streamer</compoundname>
    <derivedcompoundref refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer" prot="public" virt="non-virtual">UE::PixelStreaming2::FStreamer</derivedcompoundref>
    <includes refid="_i_pixel_streaming2_streamer_8h" local="no">IPixelStreaming2Streamer.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a0c976784f33344e7443770c2b1927fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual IPixelStreaming2Streamer::~IPixelStreaming2Streamer</definition>
        <argsstring>()=default</argsstring>
        <name>~IPixelStreaming2Streamer</name>
        <qualifiedname>IPixelStreaming2Streamer::~IPixelStreaming2Streamer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="25" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1ab038c6ea76997f5095300da5b304f573" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SetStreamFPS</definition>
        <argsstring>(int32 InFramesPerSecond)=0</argsstring>
        <name>SetStreamFPS</name>
        <qualifiedname>IPixelStreaming2Streamer::SetStreamFPS</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1aaae564681720db293f9a327c9d8cb0d4">SetStreamFPS</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">int32</ref></type>
          <declname>InFramesPerSecond</declname>
        </param>
        <briefdescription>
<para>Set the Stream FPS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InFramesPerSecond</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of frames per second the streamer will stream at. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="31" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1aed90ec4ae77edeb7b588a5013fb76514" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">int32</ref></type>
        <definition>virtual int32 IPixelStreaming2Streamer::GetStreamFPS</definition>
        <argsstring>()=0</argsstring>
        <name>GetStreamFPS</name>
        <qualifiedname>IPixelStreaming2Streamer::GetStreamFPS</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1adcd51f715d2a558969dae34ff45d1d13">GetStreamFPS</reimplementedby>
        <briefdescription>
<para>Get the Stream FPS. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The number of frames per second the streamer will stream at. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="37" column="15"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a7964e7ec75bf7758a93c5b15b7b6133f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SetCoupleFramerate</definition>
        <argsstring>(bool bCouple)=0</argsstring>
        <name>SetCoupleFramerate</name>
        <qualifiedname>IPixelStreaming2Streamer::SetCoupleFramerate</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a8bf5cb8485bba72bbca47ba6a73e59d0">SetCoupleFramerate</reimplementedby>
        <param>
          <type>bool</type>
          <declname>bCouple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setting this to true will cause the streamer to ignore the FPS value and instead push out frames as they are submitted from the video input. If the encode process takes longer than the time between frames, frames will be dropped. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bCouple</parametername>
</parameternamelist>
<parameterdescription>
<para>true to couple the streamer framerate to that of the video input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="45" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a459ae53d0468e6ff4f5dcfe5b273db09" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SetVideoProducer</definition>
        <argsstring>(TSharedPtr&lt; IPixelStreaming2VideoProducer &gt; Input)=0</argsstring>
        <name>SetVideoProducer</name>
        <qualifiedname>IPixelStreaming2Streamer::SetVideoProducer</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1af2328e2d45d00b876e901cce4bc8650a">SetVideoProducer</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TSharedPtr</ref>&lt; <ref refid="class_i_pixel_streaming2_video_producer" kindref="compound">IPixelStreaming2VideoProducer</ref> &gt;</type>
          <declname>Input</declname>
        </param>
        <briefdescription>
<para>Set the Video Input object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Input</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="class_i_pixel_streaming2_video_producer" kindref="compound">IPixelStreaming2VideoProducer</ref> that this streamer will stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="51" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a7eb7b79e611620aafba04ea4e65656cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TWeakPtr</ref>&lt; <ref refid="class_i_pixel_streaming2_video_producer" kindref="compound">IPixelStreaming2VideoProducer</ref> &gt;</type>
        <definition>virtual TWeakPtr&lt; IPixelStreaming2VideoProducer &gt; IPixelStreaming2Streamer::GetVideoProducer</definition>
        <argsstring>()=0</argsstring>
        <name>GetVideoProducer</name>
        <qualifiedname>IPixelStreaming2Streamer::GetVideoProducer</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a75fb889efca53830d7104a967ece4114">GetVideoProducer</reimplementedby>
        <briefdescription>
<para>Get the Video Input object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The <ref refid="class_i_pixel_streaming2_video_producer" kindref="compound">IPixelStreaming2VideoProducer</ref> that this streamer will stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="57" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a19b5122992ab71bf9258eebf343d0d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SetSignallingServerURL</definition>
        <argsstring>(const FString &amp;InSignallingServerURL)=0</argsstring>
        <name>SetSignallingServerURL</name>
        <qualifiedname>IPixelStreaming2Streamer::SetSignallingServerURL</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1af80ae706965034a407dbe4e932633ab5">SetSignallingServerURL</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>InSignallingServerURL</declname>
        </param>
        <briefdescription>
<para>Set the Signalling Server URL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InSignallingServerURL.</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="63" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a31cacdf4ab91ef93d03552c5623dbdc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
        <definition>virtual FString IPixelStreaming2Streamer::GetSignallingServerURL</definition>
        <argsstring>()=0</argsstring>
        <name>GetSignallingServerURL</name>
        <qualifiedname>IPixelStreaming2Streamer::GetSignallingServerURL</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a0093fc5fe408d743d66415676f4657f7">GetSignallingServerURL</reimplementedby>
        <briefdescription>
<para>Get the Signalling Server URL. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The Signalling Server URL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="69" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a6140473b69ea42a86f01158f5b4bd2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
        <definition>virtual FString IPixelStreaming2Streamer::GetId</definition>
        <argsstring>()=0</argsstring>
        <name>GetId</name>
        <qualifiedname>IPixelStreaming2Streamer::GetId</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a777174e3c675c463abed1e3f386ccc04">GetId</reimplementedby>
        <briefdescription>
<para>Get this streamer&apos;s ID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The streamer&apos;s ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="75" column="17"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a6babc074b2638ce7cc0971569cabce71" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IPixelStreaming2Streamer::IsSignallingConnected</definition>
        <argsstring>()=0</argsstring>
        <name>IsSignallingConnected</name>
        <qualifiedname>IPixelStreaming2Streamer::IsSignallingConnected</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1ab0a2b937363544ebc4c26726d876141c">IsSignallingConnected</reimplementedby>
        <briefdescription>
<para>Check if this streamer is currently connected to the signalling mechanism (e.g. websocket for signalling server). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the streamer is connected to the signalling mechanism. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="81" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a9fef154b7a191484ce319b913720bed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::StartStreaming</definition>
        <argsstring>()=0</argsstring>
        <name>StartStreaming</name>
        <qualifiedname>IPixelStreaming2Streamer::StartStreaming</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1ae847af4e28cd50933619ee321e5db6bf">StartStreaming</reimplementedby>
        <briefdescription>
<para>Start streaming this streamer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="86" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1ab0b0fd7cade233924773a9b4cdca93b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::StopStreaming</definition>
        <argsstring>()=0</argsstring>
        <name>StopStreaming</name>
        <qualifiedname>IPixelStreaming2Streamer::StopStreaming</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a59edb9bd6fa96ab39976436c4b66a921">StopStreaming</reimplementedby>
        <briefdescription>
<para>Stop this streamer from streaming. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="91" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a8df5342d898c1452f381e607f25ec8a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IPixelStreaming2Streamer::IsStreaming</definition>
        <argsstring>() const =0</argsstring>
        <name>IsStreaming</name>
        <qualifiedname>IPixelStreaming2Streamer::IsStreaming</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1ab41bc51ef6289fbcef43e69e58bb8200">IsStreaming</reimplementedby>
        <briefdescription>
<para>Get the current state of this streamer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if streaming, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="97" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a99aed3ceb6d575df55bcf19c9aaf575b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IPixelStreaming2Streamer::DECLARE_EVENT_OneParam</definition>
        <argsstring>(IPixelStreaming2Streamer, FPreConnectionEvent, IPixelStreaming2Streamer *)</argsstring>
        <name>DECLARE_EVENT_OneParam</name>
        <qualifiedname>IPixelStreaming2Streamer::DECLARE_EVENT_OneParam</qualifiedname>
        <param>
          <type><ref refid="class_i_pixel_streaming2_streamer" kindref="compound">IPixelStreaming2Streamer</ref></type>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FPreConnectionEvent</ref></type>
        </param>
        <param>
          <type><ref refid="class_i_pixel_streaming2_streamer" kindref="compound">IPixelStreaming2Streamer</ref> *</type>
        </param>
        <briefdescription>
<para>Event fired just before the streamer begins connecting to signalling. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a841637863e5fbe302b68d7ab2386fe89" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FPreConnectionEvent</ref> &amp;</type>
        <definition>virtual FPreConnectionEvent &amp; IPixelStreaming2Streamer::OnPreConnection</definition>
        <argsstring>()=0</argsstring>
        <name>OnPreConnection</name>
        <qualifiedname>IPixelStreaming2Streamer::OnPreConnection</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1ac1b2e82e65ebb0658aa5298fe6bd40a3">OnPreConnection</reimplementedby>
        <briefdescription>
<para>A getter for the OnPreConnection event. Intent is for users to call <ref refid="class_i_pixel_streaming2_module_1af266ba48aabe37d26c637b6d400ad614" kindref="member">IPixelStreaming2Module::Get()</ref>.FindStreamer(ID)-&gt;<ref refid="class_i_pixel_streaming2_streamer_1a841637863e5fbe302b68d7ab2386fe89" kindref="member">OnPreConnection()</ref>.AddXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The bindable OnPreConnection event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="108" column="29"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1acb72f5ed1637d2148a861e905964f4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IPixelStreaming2Streamer::DECLARE_EVENT_OneParam</definition>
        <argsstring>(IPixelStreaming2Streamer, FStreamingStartedEvent, IPixelStreaming2Streamer *)</argsstring>
        <name>DECLARE_EVENT_OneParam</name>
        <qualifiedname>IPixelStreaming2Streamer::DECLARE_EVENT_OneParam</qualifiedname>
        <param>
          <type><ref refid="class_i_pixel_streaming2_streamer" kindref="compound">IPixelStreaming2Streamer</ref></type>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FStreamingStartedEvent</ref></type>
        </param>
        <param>
          <type><ref refid="class_i_pixel_streaming2_streamer" kindref="compound">IPixelStreaming2Streamer</ref> *</type>
        </param>
        <briefdescription>
<para>Event fired when the streamer has connected to a signalling server and is ready for peers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a872ee61ea5770a449a98e4f79b91088d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FStreamingStartedEvent</ref> &amp;</type>
        <definition>virtual FStreamingStartedEvent &amp; IPixelStreaming2Streamer::OnStreamingStarted</definition>
        <argsstring>()=0</argsstring>
        <name>OnStreamingStarted</name>
        <qualifiedname>IPixelStreaming2Streamer::OnStreamingStarted</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a492258f01b21ee0b7dfbc32bc357dcaa">OnStreamingStarted</reimplementedby>
        <briefdescription>
<para>A getter for the OnStreamingStarted event. Intent is for users to call <ref refid="class_i_pixel_streaming2_module_1af266ba48aabe37d26c637b6d400ad614" kindref="member">IPixelStreaming2Module::Get()</ref>.FindStreamer(ID)-&gt;<ref refid="class_i_pixel_streaming2_streamer_1a872ee61ea5770a449a98e4f79b91088d" kindref="member">OnStreamingStarted()</ref>.AddXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The bindable OnStreamingStarted event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="119" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1afb81f757725ec556eb9376b727ea5413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>IPixelStreaming2Streamer::DECLARE_EVENT_OneParam</definition>
        <argsstring>(IPixelStreaming2Streamer, FStreamingStoppedEvent, IPixelStreaming2Streamer *)</argsstring>
        <name>DECLARE_EVENT_OneParam</name>
        <qualifiedname>IPixelStreaming2Streamer::DECLARE_EVENT_OneParam</qualifiedname>
        <param>
          <type><ref refid="class_i_pixel_streaming2_streamer" kindref="compound">IPixelStreaming2Streamer</ref></type>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FStreamingStoppedEvent</ref></type>
        </param>
        <param>
          <type><ref refid="class_i_pixel_streaming2_streamer" kindref="compound">IPixelStreaming2Streamer</ref> *</type>
        </param>
        <briefdescription>
<para>Event fired when the streamer has disconnected from a signalling server and has stopped streaming. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a35656b6e9589975e0d6a400a7b4e58a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FStreamingStoppedEvent</ref> &amp;</type>
        <definition>virtual FStreamingStoppedEvent &amp; IPixelStreaming2Streamer::OnStreamingStopped</definition>
        <argsstring>()=0</argsstring>
        <name>OnStreamingStopped</name>
        <qualifiedname>IPixelStreaming2Streamer::OnStreamingStopped</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1adfa8caeb804d802e0e2cba01060e38cc">OnStreamingStopped</reimplementedby>
        <briefdescription>
<para>A getter for the OnStreamingStopped event. Intent is for users to call <ref refid="class_i_pixel_streaming2_module_1af266ba48aabe37d26c637b6d400ad614" kindref="member">IPixelStreaming2Module::Get()</ref>.FindStreamer(ID)-&gt;<ref refid="class_i_pixel_streaming2_streamer_1a35656b6e9589975e0d6a400a7b4e58a9" kindref="member">OnStreamingStopped()</ref>.AddXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>- The bindable OnStreamingStopped event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="130" column="32"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a2676e5926fbe601cee10c41f72bb4f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::ForceKeyFrame</definition>
        <argsstring>()=0</argsstring>
        <name>ForceKeyFrame</name>
        <qualifiedname>IPixelStreaming2Streamer::ForceKeyFrame</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a53cfbb1fc833ef1435e1a0352c2faa1c">ForceKeyFrame</reimplementedby>
        <briefdescription>
<para>Force a key frame to be sent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="135" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a0c94d1a8de9698391248f092419e100f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::FreezeStream</definition>
        <argsstring>(UTexture2D *Texture)=0</argsstring>
        <name>FreezeStream</name>
        <qualifiedname>IPixelStreaming2Streamer::FreezeStream</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a6b524386a76feaaac55b937de4702fa6">FreezeStream</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UTexture2D</ref> *</type>
          <declname>Texture</declname>
        </param>
        <briefdescription>
<para>Freeze Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Texture</parametername>
</parameternamelist>
<parameterdescription>
<para>- The freeze frame to display. If null then the back buffer is captured. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="141" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a25afb541768015aeb951b6e3bb038179" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::UnfreezeStream</definition>
        <argsstring>()=0</argsstring>
        <name>UnfreezeStream</name>
        <qualifiedname>IPixelStreaming2Streamer::UnfreezeStream</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1ac2feb23b462a7665134563f1fd9d3558">UnfreezeStream</reimplementedby>
        <briefdescription>
<para>Unfreeze Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="146" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a7f632aa74436981c9475fe894c760fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SendAllPlayersMessage</definition>
        <argsstring>(FString MessageType, const FString &amp;Descriptor)=0</argsstring>
        <name>SendAllPlayersMessage</name>
        <qualifiedname>IPixelStreaming2Streamer::SendAllPlayersMessage</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a34e91f02225f19691a34275f13c87066">SendAllPlayersMessage</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
          <declname>MessageType</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Descriptor</declname>
        </param>
        <briefdescription>
<para>Send all players connected to this streamer a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>MessageType</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to be sent to the player. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>The contents of the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="153" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a40b9126b5aaf1d2e86238f4e79952c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SendPlayerMessage</definition>
        <argsstring>(FString PlayerId, FString MessageType, const FString &amp;Descriptor)=0</argsstring>
        <name>SendPlayerMessage</name>
        <qualifiedname>IPixelStreaming2Streamer::SendPlayerMessage</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a6b64c79d3ca52cbe3497020c3e81d32e">SendPlayerMessage</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
          <declname>PlayerId</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
          <declname>MessageType</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Descriptor</declname>
        </param>
        <briefdescription>
<para>Send all players connected to this streamer a message. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>MessageType</parametername>
</parameternamelist>
<parameterdescription>
<para>The message type to be sent to the player. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>The contents of the message. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="160" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1adbd337843a9c23075bf056770fc99679" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SendFileData</definition>
        <argsstring>(const TArray64&lt; uint8 &gt; &amp;ByteData, FString &amp;MimeType, FString &amp;FileExtension)=0</argsstring>
        <name>SendFileData</name>
        <qualifiedname>IPixelStreaming2Streamer::SendFileData</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a8a76ac77d23256763d1d8d1469e84ff0">SendFileData</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray64</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>ByteData</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>MimeType</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>FileExtension</declname>
        </param>
        <briefdescription>
<para>Send a file to the browser where we are sending video. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ByteData</parametername>
</parameternamelist>
<parameterdescription>
<para>- The raw byte data of the file. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MimeType</parametername>
</parameternamelist>
<parameterdescription>
<para>- The files Mime type. Used for reconstruction on the front end. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FileExtension</parametername>
</parameternamelist>
<parameterdescription>
<para>- The files extension. Used for reconstruction on the front end. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="168" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1ace665149e86b1fa62fd3dfcbd7338a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::KickPlayer</definition>
        <argsstring>(FString PlayerId)=0</argsstring>
        <name>KickPlayer</name>
        <qualifiedname>IPixelStreaming2Streamer::KickPlayer</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a51fa384963c25d5083a00caf842564c2">KickPlayer</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
          <declname>PlayerId</declname>
        </param>
        <briefdescription>
<para>Kick a player by player id. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PlayerId</parametername>
</parameternamelist>
<parameterdescription>
<para>- The ID of the player to kick </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="174" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1afb9969a5a260e8808e1577b686f75376" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &gt;</type>
        <definition>virtual TArray&lt; FString &gt; IPixelStreaming2Streamer::GetConnectedPlayers</definition>
        <argsstring>()=0</argsstring>
        <name>GetConnectedPlayers</name>
        <qualifiedname>IPixelStreaming2Streamer::GetConnectedPlayers</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a042eaa2461073f99b063b426eb898f7b">GetConnectedPlayers</reimplementedby>
        <briefdescription>
<para>Get the ids of the connected players. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TArray&lt;FString&gt; The ids of the connected players. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="180" column="16"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a4ed9d9cf92d34c253715538b209997e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TWeakPtr</ref>&lt; <ref refid="class_i_pixel_streaming2_input_handler" kindref="compound">IPixelStreaming2InputHandler</ref> &gt;</type>
        <definition>virtual TWeakPtr&lt; IPixelStreaming2InputHandler &gt; IPixelStreaming2Streamer::GetInputHandler</definition>
        <argsstring>()=0</argsstring>
        <name>GetInputHandler</name>
        <qualifiedname>IPixelStreaming2Streamer::GetInputHandler</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1aea94715118baa9c6289a12f46dbb395d">GetInputHandler</reimplementedby>
        <briefdescription>
<para>Get the streamer&apos;s input handler. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The streamer&apos;s input handler </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="186" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1aa556b89f7df8698eea1431e696a1b480" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_i_pixel_streaming2_audio_sink" kindref="compound">IPixelStreaming2AudioSink</ref> *</type>
        <definition>virtual IPixelStreaming2AudioSink * IPixelStreaming2Streamer::GetPeerAudioSink</definition>
        <argsstring>(FString PlayerId)=0</argsstring>
        <name>GetPeerAudioSink</name>
        <qualifiedname>IPixelStreaming2Streamer::GetPeerAudioSink</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a385f763832ac4e990b01323f9c187dab">GetPeerAudioSink</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
          <declname>PlayerId</declname>
        </param>
        <briefdescription>
<para>Get the audio sink associated with a specific peer/player. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PlayerId</parametername>
</parameternamelist>
<parameterdescription>
<para>The player id of the audio sink to retrieve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The PeerAudioSink. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="193" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1aab9baf6fd4716825860146a5d1742895" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_i_pixel_streaming2_audio_sink" kindref="compound">IPixelStreaming2AudioSink</ref> *</type>
        <definition>virtual IPixelStreaming2AudioSink * IPixelStreaming2Streamer::GetUnlistenedAudioSink</definition>
        <argsstring>()=0</argsstring>
        <name>GetUnlistenedAudioSink</name>
        <qualifiedname>IPixelStreaming2Streamer::GetUnlistenedAudioSink</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1acdcac404b84f7b960885c64240e1e2fa">GetUnlistenedAudioSink</reimplementedby>
        <briefdescription>
<para>Get an audio sink that has no peers/players listening to it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The unlistened PeerAudioSink. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="199" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a27baa5d25ba7c129ff53fec3b56310c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_i_pixel_streaming2_video_sink" kindref="compound">IPixelStreaming2VideoSink</ref> *</type>
        <definition>virtual IPixelStreaming2VideoSink * IPixelStreaming2Streamer::GetPeerVideoSink</definition>
        <argsstring>(FString PlayerId)=0</argsstring>
        <name>GetPeerVideoSink</name>
        <qualifiedname>IPixelStreaming2Streamer::GetPeerVideoSink</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a38eaf7f937077c3c5ca6946560d672d2">GetPeerVideoSink</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
          <declname>PlayerId</declname>
        </param>
        <briefdescription>
<para>Get the video sink associated with a specific peer/player. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The PeerVideoSink. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="205" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a2e426f9d3d952c58db055bc67dac7b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_i_pixel_streaming2_video_sink" kindref="compound">IPixelStreaming2VideoSink</ref> *</type>
        <definition>virtual IPixelStreaming2VideoSink * IPixelStreaming2Streamer::GetUnwatchedVideoSink</definition>
        <argsstring>()=0</argsstring>
        <name>GetUnwatchedVideoSink</name>
        <qualifiedname>IPixelStreaming2Streamer::GetUnwatchedVideoSink</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a7b748d498374d6299ccfb480808b9bef">GetUnwatchedVideoSink</reimplementedby>
        <briefdescription>
<para>Get a video sink that has no peers/players watching it. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The unwatched PeerVideoSink. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="211" column="35"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1af079d701018723e52fda9f683a25db7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::SetConfigOption</definition>
        <argsstring>(const FName &amp;OptionName, const FString &amp;Value)=0</argsstring>
        <name>SetConfigOption</name>
        <qualifiedname>IPixelStreaming2Streamer::SetConfigOption</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a13f109697a09a55a040f02821d4e4c86">SetConfigOption</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FName</ref> &amp;</type>
          <declname>OptionName</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Allows sending arbitrary configuration options during initial connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>OptionName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the option to set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>Setting a value to an empty string clears it from the mapping and prevents it being sent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="218" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1ae933a03157f3adaa27a1c796ebbeff82" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool IPixelStreaming2Streamer::GetConfigOption</definition>
        <argsstring>(const FName &amp;OptionName, FString &amp;OutValue)=0</argsstring>
        <name>GetConfigOption</name>
        <qualifiedname>IPixelStreaming2Streamer::GetConfigOption</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a1b448b8c01806f42c859b4e39e5ba0eb">GetConfigOption</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FName</ref> &amp;</type>
          <declname>OptionName</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>OutValue</declname>
        </param>
        <briefdescription>
<para>Get the Gonfigerartion value for a specific option. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>OptionName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the config option to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the config option retrieved. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="225" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a2db652253f1ad622febd217e6199a661" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::PlayerRequestsBitrate</definition>
        <argsstring>(FString PlayerId, int MinBitrate, int MaxBitrate)=0</argsstring>
        <name>PlayerRequestsBitrate</name>
        <qualifiedname>IPixelStreaming2Streamer::PlayerRequestsBitrate</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1ad37d70f479d398eedf28816897257e42">PlayerRequestsBitrate</reimplementedby>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
          <declname>PlayerId</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">int</ref></type>
          <declname>MinBitrate</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">int</ref></type>
          <declname>MaxBitrate</declname>
        </param>
        <briefdescription>
<para>Set the minimum and maximum bitrate for the streamer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PlayerId</parametername>
</parameternamelist>
<parameterdescription>
<para>Currently unused. For setting the bitrate for a individual player id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MinBitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum bitrate for the streamer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MaxBitrate</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum bitrate for the streamer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="233" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_i_pixel_streaming2_streamer_1a14043c8d38bac14cef2d4b0f603f3d5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>virtual void IPixelStreaming2Streamer::RefreshStreamBitrate</definition>
        <argsstring>()=0</argsstring>
        <name>RefreshStreamBitrate</name>
        <qualifiedname>IPixelStreaming2Streamer::RefreshStreamBitrate</qualifiedname>
        <reimplementedby refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer_1a85919590756b1624cebf2484c9dd8e02">RefreshStreamBitrate</reimplementedby>
        <briefdescription>
<para>Refresh connection with minimum and maximum bitrate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="238" column="14"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="class_i_pixel_streaming2_streamer" kindref="compound">IPixelStreaming2Streamer</ref> interface provides functionality for managing a Pixel Streaming session. This class manages the core operations of streaming, such as setting the framerate, handling video input, and interacting with the signalling server. It also allows for control over connected players and sending data to them. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>IPixelStreaming2Streamer</label>
        <link refid="class_i_pixel_streaming2_streamer"/>
      </node>
      <node id="2">
        <label>UE::PixelStreaming2::FStreamer</label>
        <link refid="class_u_e_1_1_pixel_streaming2_1_1_f_streamer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" line="22" column="1" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/Engine/PixelStreaming2/Source/PixelStreaming2/Public/IPixelStreaming2Streamer.h" bodystart="23" bodyend="239"/>
    <listofallmembers>
      <member refid="class_i_pixel_streaming2_streamer_1a99aed3ceb6d575df55bcf19c9aaf575b" prot="public" virt="non-virtual"><scope>IPixelStreaming2Streamer</scope><name>DECLARE_EVENT_OneParam</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1acb72f5ed1637d2148a861e905964f4ac" prot="public" virt="non-virtual"><scope>IPixelStreaming2Streamer</scope><name>DECLARE_EVENT_OneParam</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1afb81f757725ec556eb9376b727ea5413" prot="public" virt="non-virtual"><scope>IPixelStreaming2Streamer</scope><name>DECLARE_EVENT_OneParam</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a2676e5926fbe601cee10c41f72bb4f30" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>ForceKeyFrame</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a0c94d1a8de9698391248f092419e100f" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>FreezeStream</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1ae933a03157f3adaa27a1c796ebbeff82" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetConfigOption</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1afb9969a5a260e8808e1577b686f75376" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetConnectedPlayers</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a6140473b69ea42a86f01158f5b4bd2c7" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetId</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a4ed9d9cf92d34c253715538b209997e0" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetInputHandler</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1aa556b89f7df8698eea1431e696a1b480" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetPeerAudioSink</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a27baa5d25ba7c129ff53fec3b56310c6" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetPeerVideoSink</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a31cacdf4ab91ef93d03552c5623dbdc6" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetSignallingServerURL</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1aed90ec4ae77edeb7b588a5013fb76514" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetStreamFPS</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1aab9baf6fd4716825860146a5d1742895" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetUnlistenedAudioSink</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a2e426f9d3d952c58db055bc67dac7b5e" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetUnwatchedVideoSink</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a7eb7b79e611620aafba04ea4e65656cd" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>GetVideoProducer</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a6babc074b2638ce7cc0971569cabce71" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>IsSignallingConnected</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a8df5342d898c1452f381e607f25ec8a5" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>IsStreaming</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1ace665149e86b1fa62fd3dfcbd7338a1f" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>KickPlayer</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a841637863e5fbe302b68d7ab2386fe89" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>OnPreConnection</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a872ee61ea5770a449a98e4f79b91088d" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>OnStreamingStarted</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a35656b6e9589975e0d6a400a7b4e58a9" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>OnStreamingStopped</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a2db652253f1ad622febd217e6199a661" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>PlayerRequestsBitrate</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a14043c8d38bac14cef2d4b0f603f3d5d" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>RefreshStreamBitrate</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a7f632aa74436981c9475fe894c760fb0" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SendAllPlayersMessage</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1adbd337843a9c23075bf056770fc99679" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SendFileData</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a40b9126b5aaf1d2e86238f4e79952c06" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SendPlayerMessage</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1af079d701018723e52fda9f683a25db7a" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SetConfigOption</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a7964e7ec75bf7758a93c5b15b7b6133f" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SetCoupleFramerate</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a19b5122992ab71bf9258eebf343d0d3d" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SetSignallingServerURL</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1ab038c6ea76997f5095300da5b304f573" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SetStreamFPS</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a459ae53d0468e6ff4f5dcfe5b273db09" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>SetVideoProducer</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a9fef154b7a191484ce319b913720bed6" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>StartStreaming</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1ab0b0fd7cade233924773a9b4cdca93b3" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>StopStreaming</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a25afb541768015aeb951b6e3bb038179" prot="public" virt="pure-virtual"><scope>IPixelStreaming2Streamer</scope><name>UnfreezeStream</name></member>
      <member refid="class_i_pixel_streaming2_streamer_1a0c976784f33344e7443770c2b1927fc0" prot="public" virt="virtual"><scope>IPixelStreaming2Streamer</scope><name>~IPixelStreaming2Streamer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
