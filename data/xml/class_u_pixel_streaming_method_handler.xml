<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="ru">
  <compounddef id="class_u_pixel_streaming_method_handler" kind="class" language="C++" prot="public">
    <compoundname>UPixelStreamingMethodHandler</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UObject</basecompoundref>
    <includes refid="_pixel_streaming_method_handler_8h" local="no">PixelStreamingMethodHandler.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_u_pixel_streaming_method_handler_1a8fb1692187e2343feecd680331839ca7" prot="private" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TObjectPtr</ref>&lt; <ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref> &gt;</type>
        <definition>TObjectPtr&lt;UGameInstanceCore&gt; UPixelStreamingMethodHandler::GameInstance</definition>
        <argsstring></argsstring>
        <name>GameInstance</name>
        <qualifiedname>UPixelStreamingMethodHandler::GameInstance</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
<para>Указатель на текущий экземпляр игры. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="50" column="20" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="variable" id="class_u_pixel_streaming_method_handler_1a65036ec53c8d9a50a8e8b069858a96ba" prot="private" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TMap</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref>, <ref refid="_pixel_streaming_method_handler_8h_1a15cda9fdd9f193b7995b5d36637ce48b" kindref="member">FPixelStreamingMethodDispatcher</ref> &gt;</type>
        <definition>TMap&lt;FString, FPixelStreamingMethodDispatcher&gt; UPixelStreamingMethodHandler::Dispatchers</definition>
        <argsstring></argsstring>
        <name>Dispatchers</name>
        <qualifiedname>UPixelStreamingMethodHandler::Dispatchers</qualifiedname>
        <briefdescription>
<para>Карта диспетчеров для методов Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para>Эта карта сопоставляет имя метода (FString) с диспетчером метода (FPixelStreamingMethodDispatcher). Диспетчер метода отвечает за обработку запросов и создание ответов для соответствующего имени метода. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="58" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_u_pixel_streaming_method_handler_1a785bfade4fa2d20922c72f833b4748b5" prot="private" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TObjectPtr</ref>&lt; <ref refid="class_a_meta_custom_cesium_sun" kindref="compound">AMetaCustomCesiumSun</ref> &gt;</type>
        <definition>TObjectPtr&lt;AMetaCustomCesiumSun&gt; UPixelStreamingMethodHandler::CachedCesiumSun</definition>
        <argsstring></argsstring>
        <name>CachedCesiumSun</name>
        <qualifiedname>UPixelStreamingMethodHandler::CachedCesiumSun</qualifiedname>
        <initializer>= <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">nullptr</ref></initializer>
        <briefdescription>
<para>Указатель на выставленный <ref refid="class_a_meta_custom_cesium_sun" kindref="compound">AMetaCustomCesiumSun</ref>, может быть не валиден </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="66" column="20" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_u_pixel_streaming_method_handler_1a95d94530e808852fe65845585620890e" prot="private" static="no" mutable="no">
        <type><ref refid="class_a_building_core_base" kindref="compound">ABuildingCoreBase</ref> *</type>
        <definition>ABuildingCoreBase* UPixelStreamingMethodHandler::BuildingRef</definition>
        <argsstring></argsstring>
        <name>BuildingRef</name>
        <qualifiedname>UPixelStreamingMethodHandler::BuildingRef</qualifiedname>
        <initializer>= <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">nullptr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1234" column="27" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="1234" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_u_pixel_streaming_method_handler_1a0f5ffa064e9e62dab0f8fdf4ad89a9f6" prot="private" static="yes" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TObjectPtr</ref>&lt; <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref> &gt;</type>
        <definition>TObjectPtr&lt;UPixelStreamingMethodHandler&gt; UPixelStreamingMethodHandler::Singleton</definition>
        <argsstring></argsstring>
        <name>Singleton</name>
        <qualifiedname>UPixelStreamingMethodHandler::Singleton</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="60" column="34" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="60" bodyend="60"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_u_pixel_streaming_method_handler_1a0e7c2aed3486e4afa8489a0127b8abb1" prot="public" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TObjectPtr</ref>&lt; <ref refid="class_u_building_subsystem_information_storage_manager" kindref="compound">UBuildingSubsystemInformationStorageManager</ref> &gt;</type>
        <definition>TObjectPtr&lt;UBuildingSubsystemInformationStorageManager&gt; UPixelStreamingMethodHandler::BuildingInformationStorageManager</definition>
        <argsstring></argsstring>
        <name>BuildingInformationStorageManager</name>
        <qualifiedname>UPixelStreamingMethodHandler::BuildingInformationStorageManager</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="151" column="20" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="variable" id="class_u_pixel_streaming_method_handler_1a2009ad2ea3571efdaf8dec407337cfe2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool UPixelStreamingMethodHandler::bIsMMSAvailable</definition>
        <argsstring></argsstring>
        <name>bIsMMSAvailable</name>
        <qualifiedname>UPixelStreamingMethodHandler::bIsMMSAvailable</qualifiedname>
        <initializer>= <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1101" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="class_u_pixel_streaming_method_handler_1a6f26592cbd38c3ace55eec7e74a19066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">class</ref></type>
        <definition>friend class FPixelStreamingMethodHandlerRegularTests</definition>
        <argsstring></argsstring>
        <name>FPixelStreamingMethodHandlerRegularTests</name>
        <qualifiedname>UPixelStreamingMethodHandler::FPixelStreamingMethodHandlerRegularTests</qualifiedname>
        <param>
          <type>FPixelStreamingMethodHandlerRegularTests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="690" column="22" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_u_pixel_streaming_method_handler_1af599be5826fc16b66fb52abeb15df7f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">class</ref></type>
        <definition>friend class FPixelStreamingMethodHandlerDegenerateTests</definition>
        <argsstring></argsstring>
        <name>FPixelStreamingMethodHandlerDegenerateTests</name>
        <qualifiedname>UPixelStreamingMethodHandler::FPixelStreamingMethodHandlerDegenerateTests</qualifiedname>
        <param>
          <type>FPixelStreamingMethodHandlerDegenerateTests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="691" column="22" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="691" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ab191f4d964ebfc26677bf533338a4f91" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_a_meta_custom_cesium_sun" kindref="compound">AMetaCustomCesiumSun</ref> *</type>
        <definition>AMetaCustomCesiumSun * UPixelStreamingMethodHandler::GetCesiumSun</definition>
        <argsstring>()</argsstring>
        <name>GetCesiumSun</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetCesiumSun</qualifiedname>
        <briefdescription>
<para>Проверяет валидность CesiumSun,. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="71" column="30" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="78" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a702367cb614520420571697675aa5b54" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::RegisterDefaultDispatchers</definition>
        <argsstring>()</argsstring>
        <name>RegisterDefaultDispatchers</name>
        <qualifiedname>UPixelStreamingMethodHandler::RegisterDefaultDispatchers</qualifiedname>
        <briefdescription>
<para>RegisterDefaultDispatchers - это метод класса <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод регистрирует диспетчеры по умолчанию для различных методов pixel streaming. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="79" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="92" bodyend="205"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1addfe65b43d9b940fbe10ca1579f171bb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::RegisterDispatcher</definition>
        <argsstring>(const FString &amp;MethodName, const FPixelStreamingMethodDispatcher &amp;Dispatcher)</argsstring>
        <name>RegisterDispatcher</name>
        <qualifiedname>UPixelStreamingMethodHandler::RegisterDispatcher</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>MethodName</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_pixel_streaming_method_handler_8h_1a15cda9fdd9f193b7995b5d36637ce48b" kindref="member">FPixelStreamingMethodDispatcher</ref> &amp;</type>
          <declname>Dispatcher</declname>
        </param>
        <briefdescription>
<para>Зарегистрировать диспетчер метода для заданного имени метода. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>MethodName</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя метода. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Dispatcher</parametername>
</parameternamelist>
<parameterdescription>
<para>Диспетчер метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="88" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ab353639ada2a29e8fd1e73469cb24162" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_pixel_streaming_method_handler_8h_1a15cda9fdd9f193b7995b5d36637ce48b" kindref="member">FPixelStreamingMethodDispatcher</ref> *</type>
        <definition>const FPixelStreamingMethodDispatcher * UPixelStreamingMethodHandler::FindDispatcher</definition>
        <argsstring>(const FString &amp;MethodName)</argsstring>
        <name>FindDispatcher</name>
        <qualifiedname>UPixelStreamingMethodHandler::FindDispatcher</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>MethodName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Найти диспетчер на основе заданного имени метода.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>MethodName</parametername>
</parameternamelist>
<parameterdescription>
<para>Имя метода для поиска диспетчера. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Диспетчер, связанный с указанным именем метода, или nullptr, если не найден. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="96" column="47" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="212" bodyend="215"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a9be22c94e934cdb9ca2f9c5586555131" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref> *</type>
        <definition>UPixelStreamingMethodHandler::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <qualifiedname>UPixelStreamingMethodHandler::Get</qualifiedname>
        <briefdescription>
<para>Получает экземпляр <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref>, если он доступен. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>UPixelStreamingMethodHandler* - Указатель на экземпляр <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref>, если он доступен, в противном случае nullptr. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="108" column="45" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae22e0989bdb5652b7322464315141dd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref> *</type>
        <definition>UPixelStreamingMethodHandler * UPixelStreamingMethodHandler::Create</definition>
        <argsstring>(UGameInstanceCore *InGameInstance, TSubclassOf&lt; UPixelStreamingMethodHandler &gt; Class)</argsstring>
        <name>Create</name>
        <qualifiedname>UPixelStreamingMethodHandler::Create</qualifiedname>
        <param>
          <type><ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref> *</type>
          <declname>InGameInstance</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TSubclassOf</ref>&lt; <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref> &gt;</type>
          <declname>Class</declname>
        </param>
        <briefdescription>
<para>Создает новый экземпляр <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>InGameInstance</parametername>
</parameternamelist>
<parameterdescription>
<para>Экземпляр игры. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Class</parametername>
</parameternamelist>
<parameterdescription>
<para>Класс <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref> для создания. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Указатель на созданный экземпляр <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="118" column="45" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="222" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ab08a0f9924afb7684dfea8529408a7ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UPixelStreamingMethodHandler::IsAvailable</definition>
        <argsstring>()</argsstring>
        <name>IsAvailable</name>
        <qualifiedname>UPixelStreamingMethodHandler::IsAvailable</qualifiedname>
        <briefdescription>
<para>Проверяет доступность метода pixel streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, если метод доступен, false в противном случае. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="127" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a7c30c1cc8720a9550475858ee149474c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetUnrealProjectVersion</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetUnrealProjectVersion</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetUnrealProjectVersion</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Получить версию проекта Unreal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC с версией проекта Unreal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="167" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="240" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a468a6f4f732c7dbebe3a0e8e94899869" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::IsCursorShown</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>IsCursorShown</name>
        <qualifiedname>UPixelStreamingMethodHandler::IsCursorShown</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Определяет, отображается ли курсор. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC с булевым полем &quot;value&quot;, представляющим отображается ли курсор. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="188" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="301" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a51bc79d8fbcc68c446a2ec68a28ce2ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetShowCursor</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetShowCursor</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetShowCursor</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает видимость указателя мыши для обработчика методов Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, указывающий на успешность или неудачу вызова метода </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="196" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="317" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aaaa41cb467fb301cfb3a64317713f5ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ResetControls</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ResetControls</name>
        <qualifiedname>UPixelStreamingMethodHandler::ResetControls</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Сбросить управление игрока. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC ответ, указывающий на успешность или неудачу </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="204" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="338" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a0e3e97a7271724d6e62a153871986c56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::Ping</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>Ping</name>
        <qualifiedname>UPixelStreamingMethodHandler::Ping</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Формирует ответ на Ping. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="317" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="519" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a97e5cb3e7640e9e3c5b00e543242f841" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetControlMode</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetControlMode</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetControlMode</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Формирует ответ с информацией о режиме управления. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, содержащий в себе информацию о режиме управления. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="325" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="527" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8caa079ae0354eb0faaf513ccde1177c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetControlMode</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetControlMode</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetControlMode</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает режим управления. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, содержащий в себе информацию об успехе операции установки режима управления. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="333" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="546" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8df7a0bc1684a226a91bffb84f7adf01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ExitCharacterPlacementMode</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ExitCharacterPlacementMode</name>
        <qualifiedname>UPixelStreamingMethodHandler::ExitCharacterPlacementMode</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Выходит из режима выставления персонажа на сцену. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="341" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="641" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aecaab2115386db5a587e09eccba88440" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::SetCartographicDragEnabled</definition>
        <argsstring>(bool bValue)</argsstring>
        <name>SetCartographicDragEnabled</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetCartographicDragEnabled</qualifiedname>
        <param>
          <type>bool</type>
          <declname>bValue</declname>
        </param>
        <briefdescription>
<para>Устанавливает состояние функции картировочного перетаскивания. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод используется для включения или отключения функции картировочного перетаскивания. Когда картировочное перетаскивание включено, карту можно перемещать, перетаскивая курсор или прикосновение.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Значение, указывающее, следует ли включить или отключить картировочное перетаскивание. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="352" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="656" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ace7eb561470a7c06c7eede5d3f1bb1cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::SendDataToOpenObjectCard</definition>
        <argsstring>(const TSharedPtr&lt; FJsonObject &gt; &amp;ObjectData)</argsstring>
        <name>SendDataToOpenObjectCard</name>
        <qualifiedname>UPixelStreamingMethodHandler::SendDataToOpenObjectCard</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TSharedPtr</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FJsonObject</ref> &gt; &amp;</type>
          <declname>ObjectData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="362" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="705" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1afd278bccd311ef6e94fa92cec9d0d4db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::ShowLoadingScreen</definition>
        <argsstring>()</argsstring>
        <name>ShowLoadingScreen</name>
        <qualifiedname>UPixelStreamingMethodHandler::ShowLoadingScreen</qualifiedname>
        <briefdescription>
<para>Формирует объект запроса, указывающий на показ загрузочного экрана. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="398" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="899" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4ed20a8a8245dd1074055ebbd2932fc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::HideLoadingScreen</definition>
        <argsstring>()</argsstring>
        <name>HideLoadingScreen</name>
        <qualifiedname>UPixelStreamingMethodHandler::HideLoadingScreen</qualifiedname>
        <briefdescription>
<para>Формирует объект запроса, указывающий на скрытие загрузочного экрана. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="404" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="904" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a246e27331b8b652bd5e593969031c63c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::ClearSearchPath</definition>
        <argsstring>()</argsstring>
        <name>ClearSearchPath</name>
        <qualifiedname>UPixelStreamingMethodHandler::ClearSearchPath</qualifiedname>
        <briefdescription>
<para>Очищает путь поиска для Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отправляет запрос JSON-RPC на сервер для очистки пути поиска для Pixel Streaming. Путь поиска используется для поиска игры и необходимых модулей плагина для Pixel Streaming. Сервер обрабатывает запрос и возвращает ответ, указывающий успешно ли был очищен путь поиска.</para>
<para><simplesect kind="return"><para>Объект запроса JSON-RPC, представляющий запрос ClearSearchPath . Этот объект должен быть отправлен на сервер для обработки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="415" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a5a2efd1f9a9b9e7497f1c35a8719a6d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::ScreenCalibration</definition>
        <argsstring>()</argsstring>
        <name>ScreenCalibration</name>
        <qualifiedname>UPixelStreamingMethodHandler::ScreenCalibration</qualifiedname>
        <briefdescription>
<para>Выполняет калибровку экрана. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод инициирует процесс калибровки экрана в системе Pixel Streaming. Создается JSON RPC запрос с именем метода &quot;ScreenCalibration&quot; и пустыми параметрами.</para>
<para><simplesect kind="return"><para><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref> Объект JSON RPC запроса, представляющий собой запрос на калибровку экрана. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="426" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="914" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8a9317c6e4139798fe48de0f86071689" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ActivateBuildingDemoMode</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ActivateBuildingDemoMode</name>
        <qualifiedname>UPixelStreamingMethodHandler::ActivateBuildingDemoMode</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Активирует демо-режим здания. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод используется для активации демо-режима просмотра для конкретного здания. ID здания передается в качестве параметра вместе с контекстом запроса метода. Демо-режим просмотра используется для демонстрации здания в демо-версии или сценарии презентации. Если информация о здании недействительна или не может быть найдена, возвращается ответ об ошибке с соответствующим сообщением.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст запроса метода, включая ID здания.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The JSON-RPC ответ, указывающий на успех или неудачу вызова метода. Объект ответа содержит код ошибки и сообщение, если информация о здании недействительна, в противном случае он содержит булевое поле успеха, установленное в true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="456" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="948" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a13e3cf8b497a4680fbd235bf005be32a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetBuildingsOption</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetBuildingsOption</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetBuildingsOption</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает опции зданий для игрока. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод используется для установки опции здания для игрока в игре Pixel Streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст вызова метода, включая запрос и вызывающего. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC ответ, указывающий на успех или неудачу метода. Если метод успешен, будет возвращен пустой JSON объект. Если метод не удался, будет возвращен ответ об ошибке. JSON-RPC ответ упакован в объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="486" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1010" bodyend="1066"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4e44f530d0c531687694229b057cb909" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetCurrentBuildingOption</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetCurrentBuildingOption</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetCurrentBuildingOption</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>GetCurrentBuildingOption это метод, определенный в классе <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за извлечение текущего варианта здания с сервера Pixel Streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Объект <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref>, представляющий контекст метода.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Возвращает объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref>, содержащий текущий вариант здания в поле результат. Если выполнение метода не удалось, он возвращает объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> с кодом ошибки и сообщением. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="499" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1068" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a22fe241d7d262eab888e7fc462781422" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::SetCameraCoordinates</definition>
        <argsstring>(FVector EcefPosition, FRotator Rotation)</argsstring>
        <name>SetCameraCoordinates</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetCameraCoordinates</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref></type>
          <declname>EcefPosition</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FRotator</ref></type>
          <declname>Rotation</declname>
        </param>
        <briefdescription>
<para>Устанавливает координаты и вращение камеры. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод используется для установки координат и вращения камеры для пиксельного потока. Он принимает ECEFPosition в виде вектора, представляющего координаты камеры в системе ECEF (Земно-центрированная, Земно-фиксированная). Параметр Rotation - это вращатель, представляющий вращение камеры. Метод возвращает объект запроса JSON-RPC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>EcefPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>Координаты камеры в системе ECEF. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Вращение камеры. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект запроса JSON-RPC, представляющий запрос SetCameraCoordinates. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="553" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1146" bodyend="1164"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ac5235c1650226cdfbcd33dca56d6fb3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ToggleGenUrbanDesignPanel</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ToggleGenUrbanDesignPanel</name>
        <qualifiedname>UPixelStreamingMethodHandler::ToggleGenUrbanDesignPanel</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Переключает панель географических инструментов для заданного контекста метода Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="601" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1291" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4511a733db5f2f66b32029ea8c8cc7b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ToggleGeographicToolPanel</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ToggleGeographicToolPanel</name>
        <qualifiedname>UPixelStreamingMethodHandler::ToggleGeographicToolPanel</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Переключает панель географических инструментов для заданного контекста метода Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming.<itemizedlist>
<listitem><para>Request: Объект запроса JSON-RPC.<itemizedlist>
<listitem><para>Guid: Уникальный идентификатор запроса.</para>
</listitem><listitem><para>Params: Параметры запроса.<itemizedlist>
<listitem><para>value: Булево значение, указывающее, следует ли показывать или скрывать панель географических инструментов.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Caller: Вызывающий метод.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref>, <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="619" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1315" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a009a17f091e641b7e72e6523345ae185" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::IsGenUrbanDesignPanelActive</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>IsGenUrbanDesignPanelActive</name>
        <qualifiedname>UPixelStreamingMethodHandler::IsGenUrbanDesignPanelActive</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Проверяет, включена ли панель генеративного проектирования. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, содержащий результат проверки в виде булевого значения. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="628" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1320" bodyend="1333"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1abfc9632cf3dfe04e4bb6e02e3f0eddae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::UndoLastAction</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>UndoLastAction</name>
        <qualifiedname>UPixelStreamingMethodHandler::UndoLastAction</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Запрос на отмену последнего действия. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="648" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1469" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ab860d5eb212ccbc3d064c7d73e164978" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::RedoLastAction</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>RedoLastAction</name>
        <qualifiedname>UPixelStreamingMethodHandler::RedoLastAction</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Запрос на возвращение последнего отмененного действия. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="656" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1486" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a81917f987929b1bd7392de3ccd2be2b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetChecklist</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetChecklist</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetChecklist</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Возвращает чеклист генерации для фронтенда. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ, содержащий чеклист генерации. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="664" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1503" bodyend="1515"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ad8f847c9f23fa11c565911b471a40e0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetChecklist</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetChecklist</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetChecklist</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает чеклист генерации, заданный на фронтенде. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="672" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1517" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a0923829babfb3c719797b5e4b8d4068d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::DestroyArea</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>DestroyArea</name>
        <qualifiedname>UPixelStreamingMethodHandler::DestroyArea</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Запрос на удаление полигона </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий результат процесса удаления полигона </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="680" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1531" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ace836794ff5e9d17bb3fa0610030a91c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetGenerationInfo</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetGenerationInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetGenerationInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Запрос на результат крайней генерации (Значения генерации) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Значения крайней генерации </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="688" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1550" bodyend="1566"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ad3038629be1c254c8ab0b50491dfed22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetGenUrbanDesignState</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetGenUrbanDesignState</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetGenUrbanDesignState</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Получает и отправляет текущее состояние панели генеративного проектирования. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий текущее состояние генеративной панели. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="700" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1686" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae74a0d9482f7b922008550c51c307314" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetGenUrbanDesignState</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetGenUrbanDesignState</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetGenUrbanDesignState</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Выставляет текущее состояние панели генеративного проектирования. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий на возникшие в процессе ошибки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="709" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1697" bodyend="1703"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a7d3b38aa0683ec201f939469450a9e49" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GenerateArea</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GenerateArea</name>
        <qualifiedname>UPixelStreamingMethodHandler::GenerateArea</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Выставляет текущее состояние панели генеративного проектирования. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий на возникшие в процессе ошибки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="718" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1705" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a099f50214831b275ccbf2e3d3a739dc2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::FindSeparators</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>FindSeparators</name>
        <qualifiedname>UPixelStreamingMethodHandler::FindSeparators</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Создаёт и отправляет запрос на поиск разделителей для текущей территории разработки. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="727" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1577" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a783513ee9f605b443aa12e4acc896073" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetGenUrbanDesignConfig</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetGenUrbanDesignConfig</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetGenUrbanDesignConfig</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Запрос текущей конфигурации генератора </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий конфигурацию генератора </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="736" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1568" bodyend="1575"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8ffb87b068a0899ba49fc0b98b6443fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetLandAreaValue</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetLandAreaValue</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetLandAreaValue</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Запрос на текущую площадь разработки генеративного проектирования. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий площадь генеративной разработки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="745" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1739" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a9b855886cf06da49c0715e1f4e85ec98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::UpdateCurrentGenerationInfo</definition>
        <argsstring>(const FBackendReceivedGlobalStat &amp;UiData, float Density)</argsstring>
        <name>UpdateCurrentGenerationInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::UpdateCurrentGenerationInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FBackendReceivedGlobalStat</ref> &amp;</type>
          <declname>UiData</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">float</ref></type>
          <declname>Density</declname>
        </param>
        <briefdescription>
<para>Создает JSON-RPC запрос об обновлении полей в панели генерации. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>UiData</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация, передаваемая во фронтенд интерфейс. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Density</parametername>
</parameternamelist>
<parameterdescription>
<para>Актуальная плотность застройки. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC запрос об обновлении полей в панели генерации. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="754" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1749" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a18637046342848c0fd79dc00f6596d69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::OnChangeGenerationPhase</definition>
        <argsstring>(const FString &amp;NewPhase)</argsstring>
        <name>OnChangeGenerationPhase</name>
        <qualifiedname>UPixelStreamingMethodHandler::OnChangeGenerationPhase</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>NewPhase</declname>
        </param>
        <briefdescription>
<para>Создает JSON-RPC запрос об обновлении фронтенд интерфейса для новой фазы генерации. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>NewPhase</parametername>
</parameternamelist>
<parameterdescription>
<para>Новая фаза генерации. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC запрос об обновлении фронтенд интерфейса согласно новой фазе генерации. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="762" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1775" bodyend="1780"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a0fb4edc6d6b38aef5ed16502174f98d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::OnUndoRedoStateChanged</definition>
        <argsstring>(bool bCanUndo, bool bCanRedo)</argsstring>
        <name>OnUndoRedoStateChanged</name>
        <qualifiedname>UPixelStreamingMethodHandler::OnUndoRedoStateChanged</qualifiedname>
        <param>
          <type>bool</type>
          <declname>bCanUndo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bCanRedo</declname>
        </param>
        <briefdescription>
<para>Создаёт запрос на смену фронтенд состояний отмены и повторения действий. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bCanUndo</parametername>
</parameternamelist>
<parameterdescription>
<para>Флаг, указывающий возможность отмены последнего действия. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bCanRedo</parametername>
</parameternamelist>
<parameterdescription>
<para>Флаг, указывающий возможность повторения последнего отмененного действия. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Созданный запрос на смену фронтенд состояний отмены и повторения действий. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="770" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1782" bodyend="1788"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a710f8dcf2b7dbce238c411e3b49017aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::OnBuildingActiveStateChanged</definition>
        <argsstring>(FGuid Guid, bool bActive)</argsstring>
        <name>OnBuildingActiveStateChanged</name>
        <qualifiedname>UPixelStreamingMethodHandler::OnBuildingActiveStateChanged</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FGuid</ref></type>
          <declname>Guid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bActive</declname>
        </param>
        <briefdescription>
<para>Вызывается при изменении активного состояния здания. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Guid</parametername>
</parameternamelist>
<parameterdescription>
<para>Уникальный идентификатор здания. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bActive</parametername>
</parameternamelist>
<parameterdescription>
<para>Новое активное состояние здания.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Запрос Json RPC для обновления активного состояния здания. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="780" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2460" bodyend="2466"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a239c0c57e321ae4d30da0fafca6c7a86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::ShowSectionInfo</definition>
        <argsstring>(const FPropertiesChildUrbanBlock &amp;ShownStats)</argsstring>
        <name>ShowSectionInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::ShowSectionInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FPropertiesChildUrbanBlock</ref> &amp;</type>
          <declname>ShownStats</declname>
        </param>
        <briefdescription>
<para>Создает JSON-RPC запрос о показе свойств сгенерированного здания. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ShownStats</parametername>
</parameternamelist>
<parameterdescription>
<para>Свойства сгенерированного здания. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC запрос о показе свойств сгенерированного здания. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="788" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1790" bodyend="1826"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ab6f7c70703d4bf70966065364030cca7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::ShowUrbanInfo</definition>
        <argsstring>(const FJsonObjectWrapper &amp;UrbanInfoObject)</argsstring>
        <name>ShowUrbanInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::ShowUrbanInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> FJsonObjectWrapper &amp;</type>
          <declname>UrbanInfoObject</declname>
        </param>
        <briefdescription>
<para>Создает JSON-RPC запрос о показе свойств сгенерированного УБ. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>UrbanInfoObject</parametername>
</parameternamelist>
<parameterdescription>
<para>Объект содержащий информацию о выделенном УБ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC запрос о показе свойств сгенерированного УБ. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="796" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1828" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a27a74721330f01b6a118192bdf678045" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::CloseDataInfo</definition>
        <argsstring>()</argsstring>
        <name>CloseDataInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::CloseDataInfo</qualifiedname>
        <briefdescription>
<para>Создает JSON-RPC запрос на закрытие секций с информацией об УБ или здании. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>JSON-RPC запрос на закрытие секций с информацией об УБ или здании. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="802" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1833" bodyend="1836"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4c73a3d798fbed27a75e3b1557777510" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::SendNotification</definition>
        <argsstring>(const FString &amp;Type, const FString &amp;Title, const FString &amp;Text, int32 Duration)</argsstring>
        <name>SendNotification</name>
        <qualifiedname>UPixelStreamingMethodHandler::SendNotification</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Type</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Title</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Text</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">int32</ref></type>
          <declname>Duration</declname>
        </param>
        <briefdescription>
<para>Создает JSON-RPC запрос на показ уведомления с указанными параметрами. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Type</parametername>
</parameternamelist>
<parameterdescription>
<para>Тип уведомления (информация/предупреждение/ошибка). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Title</parametername>
</parameternamelist>
<parameterdescription>
<para>Заголовок показываемого уведомления. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Text</parametername>
</parameternamelist>
<parameterdescription>
<para>Текст уведомления. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Длительность уведомления в мс. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC запрос на показ уведомления с указанными параметрами. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="843" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1585" bodyend="1593"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1af6a590c7464815726c8486e4d358dfa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::OnSavedGenerationsTreeLoaded</definition>
        <argsstring>(const FJsonObjectWrapper &amp;Generations)</argsstring>
        <name>OnSavedGenerationsTreeLoaded</name>
        <qualifiedname>UPixelStreamingMethodHandler::OnSavedGenerationsTreeLoaded</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> FJsonObjectWrapper &amp;</type>
          <declname>Generations</declname>
        </param>
        <briefdescription>
<para>Создает JSON-RPC запрос на показ списка сохраненных генераций. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Generations</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON-объект, хранящий информацию о генерациях. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC запрос на показ списка сохраненных генераций. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="851" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1595" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aea557c4c198ae2c4e8d71f5ed25828f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::OnSavedGenerationsInfoLoaded</definition>
        <argsstring>(const FJsonObjectWrapper &amp;GenerationsInfo)</argsstring>
        <name>OnSavedGenerationsInfoLoaded</name>
        <qualifiedname>UPixelStreamingMethodHandler::OnSavedGenerationsInfoLoaded</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> FJsonObjectWrapper &amp;</type>
          <declname>GenerationsInfo</declname>
        </param>
        <briefdescription>
<para>Создает JSON-RPC запрос на показ информации о загруженных генерациях. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>GenerationsInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация о загруженных генерациях. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC запрос на показ информации о загруженных генерациях. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="859" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1600" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a7a29297d78621e99fc5a1d6407b63dce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TryGetDataFromPositioningTools</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TryGetDataFromPositioningTools</name>
        <qualifiedname>UPixelStreamingMethodHandler::TryGetDataFromPositioningTools</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Получаем данные из виджета компаса (нижняя строка). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC в виде списка данных полученных из виджета (плагин PositioningTools) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="868" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1389" bodyend="1429"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a03658f4c073733819472e2134f3b3e5f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::PosToolsZoomIn</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>PosToolsZoomIn</name>
        <qualifiedname>UPixelStreamingMethodHandler::PosToolsZoomIn</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Приблизить камеру </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC в виде переменной bool об успешном выполнении команды </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="885" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1431" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a50da82fd3428ecad582d25a8ab1f2ab4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::PosToolsZoomOut</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>PosToolsZoomOut</name>
        <qualifiedname>UPixelStreamingMethodHandler::PosToolsZoomOut</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Отдалить камеру </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC в виде переменной bool об успешном выполнении команды </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="894" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1450" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae8197962a908bab057a5131a5dbca60f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetCameraTransform</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetCameraTransform</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetCameraTransform</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Получает преобразование камеры на основе предоставленного контекста метода Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий детали запроса.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC с данными преобразования камеры, включая координаты и вращение. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1003" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2548" bodyend="2575"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a749ab47c55f0fe0a6e00fc6d62cf0783" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::CreateRuler</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>CreateRuler</name>
        <qualifiedname>UPixelStreamingMethodHandler::CreateRuler</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Создает линейку на основе предоставленного контекста. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий информацию, необходимую для создания линейки.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий результат создания линейки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1013" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2832" bodyend="2849"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a35993f266ae702d9434f3c8ca4fcd407" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetRulersInfo</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetRulersInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetRulersInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Получает информацию о линейках из контекста метода Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий информацию о запросе. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC с массивом объектов с информацией о линейках. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1022" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2871" bodyend="2911"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4e89345fee31efbb9dd4ae5c4e1d3014" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SaveCurrentRuler</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SaveCurrentRuler</name>
        <qualifiedname>UPixelStreamingMethodHandler::SaveCurrentRuler</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Сохраняет текущую линейку в контексте. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий информацию о линейке для сохранения.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> Ответ, указывающий результат сохранения линейки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1032" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2851" bodyend="2869"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a5ab4e508b2ae1783fb1fdd5b06ccfa59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::DestroyRuler</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>DestroyRuler</name>
        <qualifiedname>UPixelStreamingMethodHandler::DestroyRuler</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Уничтожает линейку на основе предоставленного контекста метода. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий информацию, необходимую для уничтожения линейки.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий на успех или неудачу вызова метода. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1042" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2913" bodyend="2936"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ad560cf856f7eee7943d00e02affa6040" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TranslateToRuler</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TranslateToRuler</name>
        <qualifiedname>UPixelStreamingMethodHandler::TranslateToRuler</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Переводит данное методическое приложение в линейку для Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода, содержащий информацию о запросе.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий результат перевода. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1052" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2938" bodyend="2956"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a0140fc59fedd62b8541e582af0660a72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::SetRulerLength</definition>
        <argsstring>(const FRulerInfo &amp;RulerInfo)</argsstring>
        <name>SetRulerLength</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetRulerLength</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_ruler_info" kindref="compound">FRulerInfo</ref> &amp;</type>
          <declname>RulerInfo</declname>
        </param>
        <briefdescription>
<para>Устанавливает расстояние и GUID для линейки. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RulerInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация о линейке, содержащая расстояние и GUID для установки. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект <ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref>, представляющий запрос на установку расстояния линейки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1061" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2958" bodyend="2962"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1abaec0884f16a3e20c859f8259c5cf18c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::CloseRulerArea</definition>
        <argsstring>(const FRulerInfo &amp;RulerInfo)</argsstring>
        <name>CloseRulerArea</name>
        <qualifiedname>UPixelStreamingMethodHandler::CloseRulerArea</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_ruler_info" kindref="compound">FRulerInfo</ref> &amp;</type>
          <declname>RulerInfo</declname>
        </param>
        <briefdescription>
<para>Закрывает область линейки на основе предоставленной информации о линейке. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RulerInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация о линейке для закрытия.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref> Запрос JSON-RPC, представляющий действие закрытия области линейки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1071" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2964" bodyend="2968"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a7208c89805b0555fdf0564dcce9640d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::UpdateRulerInfo</definition>
        <argsstring>(const FRulerInfo &amp;RulerInfo)</argsstring>
        <name>UpdateRulerInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::UpdateRulerInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_ruler_info" kindref="compound">FRulerInfo</ref> &amp;</type>
          <declname>RulerInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1074" column="32" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2970" bodyend="2974"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a79b4ab61a80b28b934e15468d8885a95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetRulerState</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetRulerState</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetRulerState</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Извлекает текущее состояние линейки из предоставленного контекста метода Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий информацию о запросе метода.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, указывающий текущее состояние линейки в виде булева значения. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1084" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2976" bodyend="2996"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ad16b854c7b60bee4101d38120fd90a18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::DestroyAllRulers</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>DestroyAllRulers</name>
        <qualifiedname>UPixelStreamingMethodHandler::DestroyAllRulers</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1090" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3032" bodyend="3050"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a99b969fc844dc5bb10f55504aa56ec22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ExitRuler</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ExitRuler</name>
        <qualifiedname>UPixelStreamingMethodHandler::ExitRuler</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1093" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3052" bodyend="3071"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a1e8d416ba2b73a2c3add82b3d7cfbda8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ChangeRulersLengthUnit</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ChangeRulersLengthUnit</name>
        <qualifiedname>UPixelStreamingMethodHandler::ChangeRulersLengthUnit</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1096" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3073" bodyend="3104"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ab6e54c836b44b2a569fd6da728630fd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ChangeRulersAreaUnit</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ChangeRulersAreaUnit</name>
        <qualifiedname>UPixelStreamingMethodHandler::ChangeRulersAreaUnit</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1099" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3106" bodyend="3138"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1acf7315cc18710e03f248595c3edfbb24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::CheckMmsServiceAvailability</definition>
        <argsstring>(const FString &amp;FullUrl, const FString &amp;AuthorizationToken, TFunction&lt; void(bool bAvailable)&gt; Callback)</argsstring>
        <name>CheckMmsServiceAvailability</name>
        <qualifiedname>UPixelStreamingMethodHandler::CheckMmsServiceAvailability</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>FullUrl</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>AuthorizationToken</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TFunction</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref>(bool <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">bAvailable</ref>)&gt;</type>
          <declname>Callback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1103" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2577" bodyend="2610"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1accde6a24a5ad97d593ae9375a2f88867" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ActivateShutter</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ActivateShutter</name>
        <qualifiedname>UPixelStreamingMethodHandler::ActivateShutter</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1113" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2750" bodyend="2767"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a0d2e98b96ea80f3c7441f51763e4845a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::RequestSavedGenerationsInfo</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>RequestSavedGenerationsInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::RequestSavedGenerationsInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Создает запрос на получение полной информации о сохраненных генерациях. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий детали запроса. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1129" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2793" bodyend="2809"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a5e8dcac86ac9f960dfb743c1479142fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::RequestSavedGenerationsTree</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>RequestSavedGenerationsTree</name>
        <qualifiedname>UPixelStreamingMethodHandler::RequestSavedGenerationsTree</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Обрабатывает запрос от фронтенда для получения списка сохраненных генераций. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий детали запроса. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1145" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3140" bodyend="3152"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a398dde903bf8dedea934dc184fb79ec4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ShowSavedGeneration</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ShowSavedGeneration</name>
        <qualifiedname>UPixelStreamingMethodHandler::ShowSavedGeneration</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Обрабатывает запрос от фронтенда на визуализацию сохраненной генерации. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий детали запроса. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1153" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3154" bodyend="3170"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1af2c6fcfe8e0d09b59fde4959e82eeab5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::CalculateRulersArea</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>CalculateRulersArea</name>
        <qualifiedname>UPixelStreamingMethodHandler::CalculateRulersArea</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1170" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3172" bodyend="3223"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8363f961a135b223a5d8e38dc76427dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UPixelStreamingMethodHandler::ToggleActivityBuildings</definition>
        <argsstring>(bool bShow, const TArray&lt; FGuid &gt; &amp;BuildingGuids, const TArray&lt; ABuildingCoreBase * &gt; &amp;BuildingsRef, bool bUseExToggleActive, bool bUseNotify)</argsstring>
        <name>ToggleActivityBuildings</name>
        <qualifiedname>UPixelStreamingMethodHandler::ToggleActivityBuildings</qualifiedname>
        <param>
          <type>bool</type>
          <declname>bShow</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FGuid</ref> &gt; &amp;</type>
          <declname>BuildingGuids</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="class_a_building_core_base" kindref="compound">ABuildingCoreBase</ref> * &gt; &amp;</type>
          <declname>BuildingsRef</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bUseExToggleActive</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bUseNotify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1172" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1971" bodyend="2064"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a77b1665daa5c22ac0a450ebdd24f98f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::CreateTriangle</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>CreateTriangle</name>
        <qualifiedname>UPixelStreamingMethodHandler::CreateTriangle</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Создает угольник на основе предоставленного контекста. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий информацию, необходимую для создания угольника.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий результат создания угольника. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1197" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1605" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1acff2914b0239e40c7714204a26834f75" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::IsTriangleActive</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>IsTriangleActive</name>
        <qualifiedname>UPixelStreamingMethodHandler::IsTriangleActive</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Возвращает состояние работы угольника. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Ответ JSON-RPC, содержащий информацию о состоянии работы угольника (активен/неактивен). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1205" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1624" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ad271912a54c8e21d0f38ea8cdcf23348" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ExitTriangle</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ExitTriangle</name>
        <qualifiedname>UPixelStreamingMethodHandler::ExitTriangle</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Завершает работу с угольником. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Ответ JSON-RPC, указывающий результат завершения работы с угольником. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1213" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1640" bodyend="1652"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae0400df7f1ff2fbf686ab4bb27e7dbcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::UpdateUnrealRenderSettings</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>UpdateUnrealRenderSettings</name>
        <qualifiedname>UPixelStreamingMethodHandler::UpdateUnrealRenderSettings</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Десериализует настройки и применяет их к рендеру сцены.. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий результат завершения работы. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1221" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1654" bodyend="1672"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a10156a18d68d8f867b2a7288be6ffa6d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref> *</type>
        <definition>UGameInstanceCore * UPixelStreamingMethodHandler::GetGameInstance</definition>
        <argsstring>() const noexcept</argsstring>
        <name>GetGameInstance</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetGameInstance</qualifiedname>
        <briefdescription>
<para>Извлекает экземпляр игры из <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод извлекает экземпляр игры из <ref refid="class_u_pixel_streaming_method_handler" kindref="compound">UPixelStreamingMethodHandler</ref> и возвращает его. Экземпляр игры имеет тип <ref refid="class_u_game_instance_core" kindref="compound">UGameInstanceCore</ref>.</para>
<para><simplesect kind="return"><para>Экземпляр игры. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="139" column="27" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8a37921ba0258217b7168be4251089a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UWorld</ref> *</type>
        <definition>UWorld * UPixelStreamingMethodHandler::GetWorld</definition>
        <argsstring>() const override</argsstring>
        <name>GetWorld</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetWorld</qualifiedname>
        <briefdescription>
<para>Возвращает объект мира, связанный с обработчиком методов PixelStreaming. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод используется для получения ссылки на объект мира, связанный с обработчиком методов PixelStreaming. Объект мира представляет собой игровой мир, в котором работает обработчик методов PixelStreaming.</para>
<para><simplesect kind="return"><para>Указатель на объект UWorld, представляющий игровой мир, или nullptr, если нет доступного действующего экземпляра игры. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="149" column="24" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aebd21faae06ab0b7f8270da48fdf20fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::HandleRequest</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>HandleRequest</name>
        <qualifiedname>UPixelStreamingMethodHandler::HandleRequest</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Обрабатывает запрос, сделанный обработчику метода PixelStreaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект JSON-RPC ответа. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="159" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="230" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aafe2c7092d8f9f1d148defbbacfc30b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SearchBuildingsByKeywords</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>SearchBuildingsByKeywords</name>
        <qualifiedname>UPixelStreamingMethodHandler::SearchBuildingsByKeywords</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Ищет здания по ключевым словам. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод ищет здания на основе данного ключевого слова. Он получает здания из менеджера хранилища информации о зданиях и возвращает результаты поиска в формате JSON.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода, содержащий параметры запроса. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, содержащий результаты поиска. Если поиск успешен, ответ будет включать массив зданий в поле &quot;buildings&quot; объекта JSON. Если поиск не удался, в ответе будет сообщение об ошибке. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="180" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="248" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8792526cc568fe57832d66c14675c305" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetLayers</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>GetLayers</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetLayers</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Метод GetLayers возвращает JSON-RPC ответ с массивом слоев. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC с массивом слоев. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="212" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="355" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1adbda73a34c235ab2debee96beca864b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ToggleLayers</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>ToggleLayers</name>
        <qualifiedname>UPixelStreamingMethodHandler::ToggleLayers</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Включает или выключает слои на основе предоставленного запроса JSON-RPC. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC ответ, содержащий переключенные слои. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="220" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="385" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aab5df79c2ee5be28006aa2eb7112140f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TranslateCamera</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TranslateCamera</name>
        <qualifiedname>UPixelStreamingMethodHandler::TranslateCamera</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Переводит позицию и вращение камеры на основе запроса JSON-RPC. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий на успешность или неудачу перемещения камеры. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="228" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a957faeaa14d949d5deadfefee1a94cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TranslateCameraToObject</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TranslateCameraToObject</name>
        <qualifiedname>UPixelStreamingMethodHandler::TranslateCameraToObject</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Переводит камеру к объекту на основе указанных параметров запроса. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC ответ, указывающий на успешность или неудачу перемещения камеры. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="236" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aa5ec1710ddb004c31ce14bdff2719a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetDpiScale</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetDpiScale</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetDpiScale</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Выставление dpi масштаба клиента. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за выставление dpi масштаба клиента для Pixel Streaming. Он принимает параметр <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref>, который содержит контекст вызова метода.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст вызова метода, который включает в себя необходимую информацию.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref>, представляющий ответ операции. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="249" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="3225" bodyend="3247"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae04482a72ec2ac295c8052760ac0cba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TeleportCameraToObject</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TeleportCameraToObject</name>
        <qualifiedname>UPixelStreamingMethodHandler::TeleportCameraToObject</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Телепортация камеры к указанному объекту. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за телепортацию камеры к указанному объекту. Он получает запрос JSON-RPC и контроллер игрока в качестве параметров.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий результат процесса телепортации.</para>
</simplesect>
<simplesect kind="note"><para>Реализация этого метода должна быть предоставлена в производном классе. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="264" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aae34218e16a63e004cea80188231d08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TeleportCamera</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TeleportCamera</name>
        <qualifiedname>UPixelStreamingMethodHandler::TeleportCamera</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Телепортация камеры. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за телепортацию камеры в игре Pixel Streaming. Он принимает параметр <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref>, который содержит контекст вызова метода.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст вызова метода, который включает в себя необходимую информацию для телепортации.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref>, представляющий ответ операции телепортации. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="277" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1acedac3b655d094d943ba4ac7e6f6ab4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::MacRightMouseClick</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>MacRightMouseClick</name>
        <qualifiedname>UPixelStreamingMethodHandler::MacRightMouseClick</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Диспетчеризует событие правого щелчка мыши для Mac. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, указывающий на успешность или неудачу. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="285" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1afafc0296309e0e6ea1bae1335ff1515c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::OpenLevelByName</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>OpenLevelByName</name>
        <qualifiedname>UPixelStreamingMethodHandler::OpenLevelByName</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Инициирует переход на новый уровень по названию. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, указывающий на успешность или неудачу. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="293" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="453" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a204987f64e3669ec7711454b344c065b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetAccessibleLevels</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>GetAccessibleLevels</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetAccessibleLevels</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Формирует ответ с информацией о доступных уровнях. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, содержащий в себе информацию о доступных уровнях. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="301" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="480" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4a5f0e96748f01e982c755f227e1f275" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetCurrentLevel</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>GetCurrentLevel</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetCurrentLevel</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Формирует ответ с информацией о текущем уровне. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект ответа JSON-RPC, содержащий в себе информацию о текущем уровне. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="309" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="504" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a19f47e8e26fcefd9a708d42df25dae43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::OpenObjectCard</definition>
        <argsstring>(ABuildingCoreBase *BuildingReference, AMetaPlayerController *Caller)</argsstring>
        <name>OpenObjectCard</name>
        <qualifiedname>UPixelStreamingMethodHandler::OpenObjectCard</qualifiedname>
        <param>
          <type><ref refid="class_a_building_core_base" kindref="compound">ABuildingCoreBase</ref> *</type>
          <declname>BuildingReference</declname>
        </param>
        <param>
          <type><ref refid="class_a_meta_player_controller" kindref="compound">AMetaPlayerController</ref> *</type>
          <declname>Caller</declname>
        </param>
        <briefdescription>
<para>Формирует запрос с информацией, необходимой для отображения карточки здания на фронтенде. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>BuildingRef</parametername>
</parameternamelist>
<parameterdescription>
<para>Информация о здании. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="360" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="663" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a9ce11c4f4e63dd413828a570b656bee6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::OpenLayersCard</definition>
        <argsstring>(const TArray&lt; FDecisionActorInfo &gt; &amp;DecisionActorInfo)</argsstring>
        <name>OpenLayersCard</name>
        <qualifiedname>UPixelStreamingMethodHandler::OpenLayersCard</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="struct_f_decision_actor_info" kindref="compound">FDecisionActorInfo</ref> &gt; &amp;</type>
          <declname>DecisionActorInfo</declname>
        </param>
        <briefdescription>
<para>Формирует запрос с информацией, необходимой для отображения карточки слоя принятых решений на фронтенде. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DecisionActorInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив структур с информацией об обьектах, для которых открываются карточки. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="370" column="25" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="712" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a311e7705f3f37d20468854e427e40446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::CameraPinClick</definition>
        <argsstring>(const TArray&lt; FDecisionActorInfo &gt; &amp;DecisionActorCamerasInformation)</argsstring>
        <name>CameraPinClick</name>
        <qualifiedname>UPixelStreamingMethodHandler::CameraPinClick</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="struct_f_decision_actor_info" kindref="compound">FDecisionActorInfo</ref> &gt; &amp;</type>
          <declname>DecisionActorCamerasInformation</declname>
        </param>
        <briefdescription>
<para>Формирует запрос с информацией, необходимой для отображения видеопотока со слоя видеокамер </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DecisionActorCamerasInformation</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив структур с информацией об обьектах, для которых надо открыть трансляцию </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="378" column="25" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="857" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a31a3ea5f86bc28320d50b5a3aa363cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_request" kindref="compound">FJsonRpcRequest</ref></type>
        <definition>FJsonRpcRequest UPixelStreamingMethodHandler::CloseLayersCard</definition>
        <argsstring>()</argsstring>
        <name>CloseLayersCard</name>
        <qualifiedname>UPixelStreamingMethodHandler::CloseLayersCard</qualifiedname>
        <briefdescription>
<para>Формирует запрос на закрытие карточки на фронте. Инициирует её закрытие. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="384" column="25" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="882" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a0e8d46a2e8eadbdaa3491687b04224e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::OnClosedLayersCard</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>OnClosedLayersCard</name>
        <qualifiedname>UPixelStreamingMethodHandler::OnClosedLayersCard</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Ивент срабатываемый при закрытии карточки Принятых Решений на фронте. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Пришедшая информация о карточке. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="392" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="887" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a3aa21ce6c2ea5074965ac237f447d8d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::DestroySearchAnchor</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>DestroySearchAnchor</name>
        <qualifiedname>UPixelStreamingMethodHandler::DestroySearchAnchor</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Уничтожает точку поиска. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за уничтожение точки поиска в Pixel Streaming.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Объект контекста, содержащий контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC ответ, указывающий на успех или неудачу операции.<itemizedlist>
<listitem><para>Если точка поиска успешно уничтожена, ответ будет содержать сообщение &quot;Успешное уничтожение точки поиска&quot;.</para>
</listitem><listitem><para>Если точку поиска не удалось уничтожить, ответ будет содержать сообщение &quot;Не удалось уничтожить точку поиска&quot; и соответствующий код ошибки. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="440" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="919" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a93c7e6858ceff03c090793271c3e94ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>UPixelStreamingMethodHandler::GetCurrentBuildings</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>GetCurrentBuildings</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetCurrentBuildings</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Извлекает текущие здания в игре. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод возвращает JSON объект, содержащий информацию о текущих зданиях в игре.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст вызова метода.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> Объект ответа, содержащий JSON представление текущих зданий. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="471" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="965" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1af57aba16a01413a7bc575f3533bc9bc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_u_building_information_storage_manager_base" kindref="compound">UBuildingInformationStorageManagerBase</ref> *</type>
        <definition>UBuildingInformationStorageManagerBase * UPixelStreamingMethodHandler::GetBuildingInformationStorageManager</definition>
        <argsstring>() const</argsstring>
        <name>GetBuildingInformationStorageManager</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetBuildingInformationStorageManager</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="501" column="48" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1090" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a7ef962515e20eab7e1d552d04d41f4e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetLightType</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetLightType</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetLightType</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает тип света для Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода, содержащий данные запроса.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий, был ли успешно установлен тип света.<itemizedlist>
<listitem><para>Если тип света был успешно установлен, ответ будет содержать булевое поле &quot;result&quot;, установленное в true.</para>
</listitem><listitem><para>Если тип света не может быть установлен из-за недопустимого параметра, ответ будет содержать код ошибки <ref refid="_json_rpc_error_8h_1a6becc926444e3e0cac2415f82b668ec2ad4c4700b7580ce00c94ddf7b363de696" kindref="member">EJsonRpcErrorCode::InvalidParams</ref>.</para>
</listitem><listitem><para>Если тип света не может быть установлен из-за внутренней ошибки, ответ будет содержать код ошибки <ref refid="_json_rpc_error_8h_1a6becc926444e3e0cac2415f82b668ec2a8462b58246e70e5c83e5b939a9332cb5" kindref="member">EJsonRpcErrorCode::InternalError</ref>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="note"><para>Этот метод предполагает, что система Pixel Streaming доступна и инициализирована. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="516" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1095" bodyend="1125"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a7db24dccc806f240a8c7af410bcbc35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetLightType</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetLightType</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetLightType</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Получить тип света из заданного контекста метода Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод извлекает тип света из контекста метода Pixel Streaming и возвращает его в виде JSON-ответа.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming для получения типа света.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Тип света в виде JSON-ответа. В JSON-ответе содержится поле &apos;type&apos;, которое представляет тип света. Пример JSON-ответа: { &quot;type&quot;: &quot;directional&quot; } Если при извлечении типа света произошла ошибка, будет возвращен ответ об ошибке. Ответ об ошибке содержит код ошибки и описание ошибки.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref>, <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="538" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1127" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a8f2b4d889b33f834087a38c6eea75466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TranslateCameraToBuilding</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TranslateCameraToBuilding</name>
        <qualifiedname>UPixelStreamingMethodHandler::TranslateCameraToBuilding</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Переводит камеру к указанному зданию. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за перемещение камеры к указанному зданию с использованием предоставленного контекста.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий необходимые данные для перевода камеры.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>частота кадров JSON-RPC, указывающая статус операции перевода камеры. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="565" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1166" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ade8064659757beaa533a23ae43ab628e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TeleportCameraToBuilding</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TeleportCameraToBuilding</name>
        <qualifiedname>UPixelStreamingMethodHandler::TeleportCameraToBuilding</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Телепортирует камеру к определенному зданию. </para>
        </briefdescription>
        <detaileddescription>
<para>Этот метод отвечает за телепортацию камеры к определенному зданию в системе Pixel Streaming. Он принимает контекст метода и возвращает ответ JSON-RPC.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст выполнения метода.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий статус запроса на телепортацию. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="579" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1229" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ac4410b749bd5080fdd0974a9235454dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::ConstructSearchAnchorPoint</definition>
        <argsstring>(const FVector Location) const</argsstring>
        <name>ConstructSearchAnchorPoint</name>
        <qualifiedname>UPixelStreamingMethodHandler::ConstructSearchAnchorPoint</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref></type>
          <declname>Location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="582" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a58c79daaf31bcf3afcd8aef37ede4873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetGlobeUrl</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetGlobeUrl</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetGlobeUrl</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Установка Url ссылки для глобуса на сцене </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст выполнения метода.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий статус запроса на смену ссылки. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="592" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a5cde6881081f68d5effc6147b15ae89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::TryOpenObjectCard</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>TryOpenObjectCard</name>
        <qualifiedname>UPixelStreamingMethodHandler::TryOpenObjectCard</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Пытается открыть карточку объекта, передаваемого через контекст. Если здание с указанным в контексте Id было найдено, посылает запрос об открытии соответствующей карточки и возвращает true в ответе. Если здание не было найдено, возвращает в ответе false. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel streaming </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий найдено ли соответствующее здание </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="640" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1335" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a82f6bbc749f3c1b3945c40d3818fb5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetFacadeVariant</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetFacadeVariant</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetFacadeVariant</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает тип фасада секции </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода, содержащий параметры запроса.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> с обновленным временем сцены при успешном выполнении, или ответ об ошибке, если параметры недействительны или если CesiumSunSky недействителен. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="813" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1838" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aeeb604de9dab1b7daeb5ebb58ae92de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetUrbanFacadeVariant</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetUrbanFacadeVariant</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetUrbanFacadeVariant</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает тип фасада для всех секций выделенного УБ </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода, содержащий параметры запроса.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> с обновленным временем сцены при успешном выполнении, или ответ об ошибке, если параметры недействительны или если CesiumSunSky недействителен. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="824" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1859" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4be70170725d250ede74a3563d32af55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::DeselectAll</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>DeselectAll</name>
        <qualifiedname>UPixelStreamingMethodHandler::DeselectAll</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Снять всё текущее выделение </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="831" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1877" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a394fe3ace86d241fce050f7380851254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetDataFromPositioningTools</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetDataFromPositioningTools</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetDataFromPositioningTools</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Вызывает запрос на обработку данных позиционирования камеры JSON-RPC для целей тестирования. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий на успешность или неудачу получения данных. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="876" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a606f79c9f8fee423fde3674651f7bac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::PosToolsZoomTest</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>PosToolsZoomTest</name>
        <qualifiedname>UPixelStreamingMethodHandler::PosToolsZoomTest</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Вызывает запрос на зум камеры JSON-RPC для целей тестирования. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, указывающий на успешность или неудачу получения данных. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="902" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aecbfdcc717d4fad189c52342799ff16d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetLayerGroups</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>GetLayerGroups</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetLayerGroups</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Возвращает группы слоев. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст запроса </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="910" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1887" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a732e03aad1fbf8d1ae16ed1f94e43fcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ToggleLayerGroup</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>ToggleLayerGroup</name>
        <qualifiedname>UPixelStreamingMethodHandler::ToggleLayerGroup</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Переключает состояние группы слоев. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст запроса </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="918" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1931" bodyend="1969"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aa8519e10831f65a33de3bda4eea480ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ShowHideBuilding</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>ShowHideBuilding</name>
        <qualifiedname>UPixelStreamingMethodHandler::ShowHideBuilding</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="921" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2066" bodyend="2119"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aea8b3f66f6fda7d8cf4bd2c17e9f234a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ChangeUserInfo</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>ChangeUserInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::ChangeUserInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Метод для обработки изменения информации пользователя в Pixel Streaming. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий информацию о запросе метода.<itemizedlist>
<listitem><para>Запрос должен включать информацию о пользователе, которую нужно изменить.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, содержащий результат изменения информации о пользователе:<itemizedlist>
<listitem><para>Если вызывающий не действительный или не типа <ref refid="class_a_meta_player_controller_wrapper" kindref="compound">AMetaPlayerControllerWrapper</ref>, возвращается ответ об ошибке с сообщением &quot;Invalid caller or
caller != MetaPlayerControllerWrapper.&quot;</para>
</listitem><listitem><para>Если вызывающий не действительный, возвращается ответ об ошибке с сообщением &quot;Invalid caller.&quot;</para>
</listitem><listitem><para>Если в параметрах запроса отсутствует параметр &quot;userInfo&quot;, возвращается ответ об ошибке с сообщением &quot;Could not resolve `userInfo`
parameter.&quot;</para>
</listitem><listitem><para>Если не удается десериализовать информацию о пользователе, возвращается ответ об ошибке с сообщением &quot;Cannot be deserialized `userInfo`.&quot;</para>
</listitem><listitem><para>Если информация о пользователе успешно изменена, возвращается ответ об успешном выполнении с булевым полем &quot;success&quot;, установленным в true. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="939" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2121" bodyend="2171"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ab855b2c6eef8554779d0f7e27e031fc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ActivateBuildings</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ActivateBuildings</name>
        <qualifiedname>UPixelStreamingMethodHandler::ActivateBuildings</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="942" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2408" bodyend="2458"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a2f637d3857da0cc152ffc933ba389f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetSceneTime</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>SetSceneTime</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetSceneTime</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Устанавливает время сцены на основе предоставленных параметров. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода, содержащий параметры запроса.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Объект <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> с обновленным временем сцены при успешном выполнении, или ответ об ошибке, если параметры недействительны или если CesiumSunSky недействителен. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="953" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2523" bodyend="2546"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aa60f2b6c486ef948a0c4207f593842d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::CreateDataLayer</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>CreateDataLayer</name>
        <qualifiedname>UPixelStreamingMethodHandler::CreateDataLayer</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Создает слой данных на основе предоставленного контекста. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий необходимую информацию для создания слоя данных.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref> Ответ JSON-RPC, указывающий на успешное или неудачное создание слоя данных. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="962" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2173" bodyend="2305"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ad183173405b0891e99251a57f9af7476" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::OrientCameraNorthwise</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>OrientCameraNorthwise</name>
        <qualifiedname>UPixelStreamingMethodHandler::OrientCameraNorthwise</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Поворачивает камеру к Северу. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="966" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2307" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ac9eaec163930e25cfa7b24073aeceb52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::DestroyDataLayers</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>DestroyDataLayers</name>
        <qualifiedname>UPixelStreamingMethodHandler::DestroyDataLayers</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Уничтожает слои данных на основе предоставленного контекста. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref>, содержащий информацию, необходимую для уничтожения слоев данных.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref>, указывающий на успех или неудачу уничтожения слоев данных. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="976" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2361" bodyend="2406"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae1c43695a6b4b36c11ea8b3ef140366e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetCurrentDataLayers</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetCurrentDataLayers</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetCurrentDataLayers</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Возвращает активные на данный момент ID слоев принятых решений </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref>, содержащий информацию о запросе.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ <ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref>, содержащий запрашиваемую информацию </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="986" column="26"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a4d74bd5ae14b828ff771be5aaae21237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetSceneTime</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetSceneTime</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetSceneTime</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий информацию о запросе.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, содержащий информацию о времени сцены, включая временную метку и часовой пояс. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="994" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2506" bodyend="2521"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ac6771a24110c1861be69b6829c3de2da" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::VisualizationRulersByInfo</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>VisualizationRulersByInfo</name>
        <qualifiedname>UPixelStreamingMethodHandler::VisualizationRulersByInfo</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1087" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2998" bodyend="3030"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a5c4c239f1638dbc8488a25619b931e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::GetObjectDataFromMms</definition>
        <argsstring>(const FString &amp;FullUrl, const FString &amp;AuthorizationToken)</argsstring>
        <name>GetObjectDataFromMms</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetObjectDataFromMms</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>FullUrl</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>AuthorizationToken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1105" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2612" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1adbdf2e3c75bc43b31a9a21c6dd220b2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TSharedPtr</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FJsonObject</ref> &gt;</type>
        <definition>TSharedPtr&lt; FJsonObject &gt; UPixelStreamingMethodHandler::GetObjectDataFromJson</definition>
        <argsstring>() const</argsstring>
        <name>GetObjectDataFromJson</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetObjectDataFromJson</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1107" column="20" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2624" bodyend="2688"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a31110c68ade002962fac8b9d0008f097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::OnObjectDataReceived</definition>
        <argsstring>(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful)</argsstring>
        <name>OnObjectDataReceived</name>
        <qualifiedname>UPixelStreamingMethodHandler::OnObjectDataReceived</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FHttpRequestPtr</ref></type>
          <declname>Request</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FHttpResponsePtr</ref></type>
          <declname>Response</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bWasSuccessful</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1109" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2690" bodyend="2738"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae5a845421df483643db32b10923f3550" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UPixelStreamingMethodHandler::PrepareObjectToOpenCard</definition>
        <argsstring>() const</argsstring>
        <name>PrepareObjectToOpenCard</name>
        <qualifiedname>UPixelStreamingMethodHandler::PrepareObjectToOpenCard</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1111" column="14" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2740" bodyend="2748"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a14617577a06db4d8026bbc51990c63f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::SetShutterScreenPosition</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>SetShutterScreenPosition</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetShutterScreenPosition</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Обрабатывает запрос на получение информации о позиции шторки на стороне <ref refid="namespace_u_e" kindref="compound">UE</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий детали запроса. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1121" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2769" bodyend="2791"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ae797dda05b0bc1367372a3532448e6b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::GetShutterState</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx) const</argsstring>
        <name>GetShutterState</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetShutterState</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Возвращает состояние шторки, включена она или выключена. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий детали запроса. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ответ JSON-RPC, содержащий информацию о состоянии шторки, true - включена, false - выключена. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1137" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2811" bodyend="2830"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a748a28a2d020f31253f5ed40ce4d478d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::UpdatePhotogrammetrySettings</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>UpdatePhotogrammetrySettings</name>
        <qualifiedname>UPixelStreamingMethodHandler::UpdatePhotogrammetrySettings</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1158" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/Methods/SettingsMethods.cpp" bodystart="9" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1a5982c05e5bec4b70fd0a075610c56e2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::UpdateGlobeSettings</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>UpdateGlobeSettings</name>
        <qualifiedname>UPixelStreamingMethodHandler::UpdateGlobeSettings</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Подставляет актуальные ссылки ортофотоплана в тайлы, при необходимости обновляет их. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст метода Pixel Streaming, содержащий детали запроса. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пустой ответ JSON-RPC. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1166" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/Methods/SettingsMethods.cpp" bodystart="46" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1aa6243394c4366a418b11e373fdcf6989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_json_rpc_response" kindref="compound">FJsonRpcResponse</ref></type>
        <definition>FJsonRpcResponse UPixelStreamingMethodHandler::ExitFromPanorama</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>ExitFromPanorama</name>
        <qualifiedname>UPixelStreamingMethodHandler::ExitFromPanorama</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Возвращающает камеру к указанной координате с заданным масштабом и ракурсом. </para>
        </briefdescription>
        <detaileddescription>
<para>Используется при выходе из режима просмотра панорамы (например, при нажатии на кнопку «Закрыть»).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст, содержащий необходимые данные для перевода камеры.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON-RPC ответ, указывающий на успешность или неудачу перемещения камеры. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1186" column="26" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/Methods/PanoramaMethods.cpp" bodystart="32" bodyend="94"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1afdf78e2d297abeb08373dbb9c25b15f3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UGenerativeUrbanDesignComponent</ref> *</type>
        <definition>UGenerativeUrbanDesignComponent * UPixelStreamingMethodHandler::GetUrbanDesignComponent</definition>
        <argsstring>(const FPixelStreamingMethodContext &amp;Ctx)</argsstring>
        <name>GetUrbanDesignComponent</name>
        <qualifiedname>UPixelStreamingMethodHandler::GetUrbanDesignComponent</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_pixel_streaming_method_context" kindref="compound">FPixelStreamingMethodContext</ref> &amp;</type>
          <declname>Ctx</declname>
        </param>
        <briefdescription>
<para>Находит текущий урбан дизайн компонент </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>контекст </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Урбан дизайн компонент </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1229" column="48" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="1674" bodyend="1684"/>
      </memberdef>
      <memberdef kind="function" id="class_u_pixel_streaming_method_handler_1ac711bfe41668c974e2ba60377bf37a99" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UPixelStreamingMethodHandler::SetBuildingChangerStateHandler</definition>
        <argsstring>(ABuildingCoreBase *Building, UPixelStreamingClient *Client, AJrpsPlayerController *Caller)</argsstring>
        <name>SetBuildingChangerStateHandler</name>
        <qualifiedname>UPixelStreamingMethodHandler::SetBuildingChangerStateHandler</qualifiedname>
        <param>
          <type><ref refid="class_a_building_core_base" kindref="compound">ABuildingCoreBase</ref> *</type>
          <declname>Building</declname>
        </param>
        <param>
          <type><ref refid="class_u_pixel_streaming_client" kindref="compound">UPixelStreamingClient</ref> *</type>
          <declname>Client</declname>
        </param>
        <param>
          <type><ref refid="class_a_jrps_player_controller" kindref="compound">AJrpsPlayerController</ref> *</type>
          <declname>Caller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="1231" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/PixelStreaming/PixelStreamingMethodHandler.cpp" bodystart="2468" bodyend="2504"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Класс APixelStreamingMethodHandler отвечает за обработку запросов методов Pixel Streaming. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>UObject</label>
      </node>
      <node id="1">
        <label>UPixelStreamingMethodHandler</label>
        <link refid="class_u_pixel_streaming_method_handler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>AActor</label>
      </node>
      <node id="3">
        <label>ABuildingCoreBase</label>
        <link refid="class_a_building_core_base"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>PositionsManager</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>UActorComponent</label>
      </node>
      <node id="2">
        <label>UObject</label>
      </node>
      <node id="1">
        <label>UPixelStreamingMethodHandler</label>
        <link refid="class_u_pixel_streaming_method_handler"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>BuildingRef</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>UPositionsManager</label>
        <link refid="class_u_positions_manager"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" line="42" column="1" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Public/Core/PixelStreaming/PixelStreamingMethodHandler.h" bodystart="43" bodyend="1235"/>
    <listofallmembers>
      <member refid="class_u_pixel_streaming_method_handler_1a8a9317c6e4139798fe48de0f86071689" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ActivateBuildingDemoMode</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ab855b2c6eef8554779d0f7e27e031fc3" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ActivateBuildings</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1accde6a24a5ad97d593ae9375a2f88867" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ActivateShutter</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a2009ad2ea3571efdaf8dec407337cfe2" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>bIsMMSAvailable</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0e7c2aed3486e4afa8489a0127b8abb1" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>BuildingInformationStorageManager</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a95d94530e808852fe65845585620890e" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>BuildingRef</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a785bfade4fa2d20922c72f833b4748b5" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CachedCesiumSun</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1af2c6fcfe8e0d09b59fde4959e82eeab5" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CalculateRulersArea</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a311e7705f3f37d20468854e427e40446" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CameraPinClick</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ab6e54c836b44b2a569fd6da728630fd0" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ChangeRulersAreaUnit</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a1e8d416ba2b73a2c3add82b3d7cfbda8" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ChangeRulersLengthUnit</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aea8b3f66f6fda7d8cf4bd2c17e9f234a" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ChangeUserInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1acf7315cc18710e03f248595c3edfbb24" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CheckMmsServiceAvailability</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a246e27331b8b652bd5e593969031c63c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ClearSearchPath</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a27a74721330f01b6a118192bdf678045" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CloseDataInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a31a3ea5f86bc28320d50b5a3aa363cee" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CloseLayersCard</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1abaec0884f16a3e20c859f8259c5cf18c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CloseRulerArea</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ac4410b749bd5080fdd0974a9235454dc" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ConstructSearchAnchorPoint</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae22e0989bdb5652b7322464315141dd0" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>Create</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aa60f2b6c486ef948a0c4207f593842d9" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CreateDataLayer</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a749ab47c55f0fe0a6e00fc6d62cf0783" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CreateRuler</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a77b1665daa5c22ac0a450ebdd24f98f7" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>CreateTriangle</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4be70170725d250ede74a3563d32af55" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>DeselectAll</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ad16b854c7b60bee4101d38120fd90a18" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>DestroyAllRulers</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0923829babfb3c719797b5e4b8d4068d" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>DestroyArea</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ac9eaec163930e25cfa7b24073aeceb52" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>DestroyDataLayers</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a5ab4e508b2ae1783fb1fdd5b06ccfa59" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>DestroyRuler</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a3aa21ce6c2ea5074965ac237f447d8d1" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>DestroySearchAnchor</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a65036ec53c8d9a50a8e8b069858a96ba" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>Dispatchers</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8df7a0bc1684a226a91bffb84f7adf01" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ExitCharacterPlacementMode</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aa6243394c4366a418b11e373fdcf6989" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ExitFromPanorama</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a99b969fc844dc5bb10f55504aa56ec22" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ExitRuler</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ad271912a54c8e21d0f38ea8cdcf23348" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ExitTriangle</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ab353639ada2a29e8fd1e73469cb24162" prot="protected" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>FindDispatcher</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a099f50214831b275ccbf2e3d3a739dc2" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>FindSeparators</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1af599be5826fc16b66fb52abeb15df7f0" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>FPixelStreamingMethodHandlerDegenerateTests</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a6f26592cbd38c3ace55eec7e74a19066" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>FPixelStreamingMethodHandlerRegularTests</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8fb1692187e2343feecd680331839ca7" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GameInstance</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a7d3b38aa0683ec201f939469450a9e49" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GenerateArea</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a9be22c94e934cdb9ca2f9c5586555131" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>Get</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a204987f64e3669ec7711454b344c065b" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetAccessibleLevels</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1af57aba16a01413a7bc575f3533bc9bc6" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetBuildingInformationStorageManager</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae8197962a908bab057a5131a5dbca60f" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetCameraTransform</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ab191f4d964ebfc26677bf533338a4f91" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetCesiumSun</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a81917f987929b1bd7392de3ccd2be2b3" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetChecklist</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a97e5cb3e7640e9e3c5b00e543242f841" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetControlMode</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4e44f530d0c531687694229b057cb909" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetCurrentBuildingOption</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a93c7e6858ceff03c090793271c3e94ea" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetCurrentBuildings</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae1c43695a6b4b36c11ea8b3ef140366e" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetCurrentDataLayers</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4a5f0e96748f01e982c755f227e1f275" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetCurrentLevel</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a394fe3ace86d241fce050f7380851254" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetDataFromPositioningTools</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aa5ec1710ddb004c31ce14bdff2719a4f" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetDpiScale</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a10156a18d68d8f867b2a7288be6ffa6d" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetGameInstance</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ace836794ff5e9d17bb3fa0610030a91c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetGenerationInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a783513ee9f605b443aa12e4acc896073" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetGenUrbanDesignConfig</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ad3038629be1c254c8ab0b50491dfed22" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetGenUrbanDesignState</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8ffb87b068a0899ba49fc0b98b6443fd" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetLandAreaValue</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aecbfdcc717d4fad189c52342799ff16d" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetLayerGroups</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8792526cc568fe57832d66c14675c305" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetLayers</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a7db24dccc806f240a8c7af410bcbc35c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetLightType</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1adbdf2e3c75bc43b31a9a21c6dd220b2a" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetObjectDataFromJson</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a5c4c239f1638dbc8488a25619b931e78" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetObjectDataFromMms</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a35993f266ae702d9434f3c8ca4fcd407" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetRulersInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a79b4ab61a80b28b934e15468d8885a95" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetRulerState</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4d74bd5ae14b828ff771be5aaae21237" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetSceneTime</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae797dda05b0bc1367372a3532448e6b0" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetShutterState</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a7c30c1cc8720a9550475858ee149474c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetUnrealProjectVersion</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1afdf78e2d297abeb08373dbb9c25b15f3" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetUrbanDesignComponent</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8a37921ba0258217b7168be4251089a6" prot="public" virt="virtual"><scope>UPixelStreamingMethodHandler</scope><name>GetWorld</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aebd21faae06ab0b7f8270da48fdf20fe" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>HandleRequest</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4ed20a8a8245dd1074055ebbd2932fc9" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>HideLoadingScreen</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ab08a0f9924afb7684dfea8529408a7ff" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>IsAvailable</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a468a6f4f732c7dbebe3a0e8e94899869" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>IsCursorShown</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a009a17f091e641b7e72e6523345ae185" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>IsGenUrbanDesignPanelActive</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1acff2914b0239e40c7714204a26834f75" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>IsTriangleActive</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1acedac3b655d094d943ba4ac7e6f6ab4c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>MacRightMouseClick</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a710f8dcf2b7dbce238c411e3b49017aa" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OnBuildingActiveStateChanged</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a18637046342848c0fd79dc00f6596d69" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OnChangeGenerationPhase</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0e8d46a2e8eadbdaa3491687b04224e0" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OnClosedLayersCard</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a31110c68ade002962fac8b9d0008f097" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OnObjectDataReceived</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aea557c4c198ae2c4e8d71f5ed25828f8" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OnSavedGenerationsInfoLoaded</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1af6a590c7464815726c8486e4d358dfa7" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OnSavedGenerationsTreeLoaded</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0fb4edc6d6b38aef5ed16502174f98d4" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OnUndoRedoStateChanged</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a9ce11c4f4e63dd413828a570b656bee6" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OpenLayersCard</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1afafc0296309e0e6ea1bae1335ff1515c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OpenLevelByName</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a19f47e8e26fcefd9a708d42df25dae43" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OpenObjectCard</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ad183173405b0891e99251a57f9af7476" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>OrientCameraNorthwise</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0e3e97a7271724d6e62a153871986c56" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>Ping</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a03658f4c073733819472e2134f3b3e5f" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>PosToolsZoomIn</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a50da82fd3428ecad582d25a8ab1f2ab4" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>PosToolsZoomOut</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a606f79c9f8fee423fde3674651f7bac0" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>PosToolsZoomTest</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae5a845421df483643db32b10923f3550" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>PrepareObjectToOpenCard</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ab860d5eb212ccbc3d064c7d73e164978" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>RedoLastAction</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a702367cb614520420571697675aa5b54" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>RegisterDefaultDispatchers</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1addfe65b43d9b940fbe10ca1579f171bb" prot="protected" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>RegisterDispatcher</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0d2e98b96ea80f3c7441f51763e4845a" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>RequestSavedGenerationsInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a5e8dcac86ac9f960dfb743c1479142fb" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>RequestSavedGenerationsTree</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aaaa41cb467fb301cfb3a64317713f5ce" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ResetControls</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4e89345fee31efbb9dd4ae5c4e1d3014" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SaveCurrentRuler</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a5a2efd1f9a9b9e7497f1c35a8719a6d8" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ScreenCalibration</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aafe2c7092d8f9f1d148defbbacfc30b2" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SearchBuildingsByKeywords</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ace7eb561470a7c06c7eede5d3f1bb1cc" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SendDataToOpenObjectCard</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4c73a3d798fbed27a75e3b1557777510" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SendNotification</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ac711bfe41668c974e2ba60377bf37a99" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetBuildingChangerStateHandler</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a13e3cf8b497a4680fbd235bf005be32a" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetBuildingsOption</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a22fe241d7d262eab888e7fc462781422" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetCameraCoordinates</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aecaab2115386db5a587e09eccba88440" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetCartographicDragEnabled</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ad8f847c9f23fa11c565911b471a40e0e" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetChecklist</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8caa079ae0354eb0faaf513ccde1177c" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetControlMode</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a82f6bbc749f3c1b3945c40d3818fb5c1" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetFacadeVariant</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae74a0d9482f7b922008550c51c307314" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetGenUrbanDesignState</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a58c79daaf31bcf3afcd8aef37ede4873" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetGlobeUrl</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a7ef962515e20eab7e1d552d04d41f4e1" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetLightType</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0140fc59fedd62b8541e582af0660a72" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetRulerLength</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a2f637d3857da0cc152ffc933ba389f7b" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetSceneTime</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a51bc79d8fbcc68c446a2ec68a28ce2ce" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetShowCursor</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a14617577a06db4d8026bbc51990c63f1" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetShutterScreenPosition</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aeeb604de9dab1b7daeb5ebb58ae92de7" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>SetUrbanFacadeVariant</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aa8519e10831f65a33de3bda4eea480ca" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ShowHideBuilding</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1afd278bccd311ef6e94fa92cec9d0d4db" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ShowLoadingScreen</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a398dde903bf8dedea934dc184fb79ec4" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ShowSavedGeneration</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a239c0c57e321ae4d30da0fafca6c7a86" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ShowSectionInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ab6f7c70703d4bf70966065364030cca7" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ShowUrbanInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a0f5ffa064e9e62dab0f8fdf4ad89a9f6" prot="private" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>Singleton</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aae34218e16a63e004cea80188231d08e" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TeleportCamera</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ade8064659757beaa533a23ae43ab628e" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TeleportCameraToBuilding</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae04482a72ec2ac295c8052760ac0cba4" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TeleportCameraToObject</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8363f961a135b223a5d8e38dc76427dc" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ToggleActivityBuildings</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ac5235c1650226cdfbcd33dca56d6fb3f" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ToggleGenUrbanDesignPanel</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a4511a733db5f2f66b32029ea8c8cc7b6" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ToggleGeographicToolPanel</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a732e03aad1fbf8d1ae16ed1f94e43fcc" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ToggleLayerGroup</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1adbda73a34c235ab2debee96beca864b6" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>ToggleLayers</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1aab5df79c2ee5be28006aa2eb7112140f" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TranslateCamera</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a8f2b4d889b33f834087a38c6eea75466" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TranslateCameraToBuilding</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a957faeaa14d949d5deadfefee1a94cb5" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TranslateCameraToObject</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ad560cf856f7eee7943d00e02affa6040" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TranslateToRuler</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a7a29297d78621e99fc5a1d6407b63dce" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TryGetDataFromPositioningTools</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a5cde6881081f68d5effc6147b15ae89d" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>TryOpenObjectCard</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1abfc9632cf3dfe04e4bb6e02e3f0eddae" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>UndoLastAction</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a9b855886cf06da49c0715e1f4e85ec98" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>UpdateCurrentGenerationInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a5982c05e5bec4b70fd0a075610c56e2d" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>UpdateGlobeSettings</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a748a28a2d020f31253f5ed40ce4d478d" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>UpdatePhotogrammetrySettings</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1a7208c89805b0555fdf0564dcce9640d9" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>UpdateRulerInfo</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ae0400df7f1ff2fbf686ab4bb27e7dbcb" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>UpdateUnrealRenderSettings</name></member>
      <member refid="class_u_pixel_streaming_method_handler_1ac6771a24110c1861be69b6829c3de2da" prot="public" virt="non-virtual"><scope>UPixelStreamingMethodHandler</scope><name>VisualizationRulersByInfo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
