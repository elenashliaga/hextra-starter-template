<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="ru">
  <compounddef id="class_u_geographical_math_library" kind="class" language="C++" prot="public">
    <compoundname>UGeographicalMathLibrary</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UBlueprintFunctionLibrary</basecompoundref>
    <includes refid="_geographical_math_library_8h" local="no">GeographicalMathLibrary.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_u_geographical_math_library_1a75fc7075b3c7f74e86ee661dde6f4af7" prot="public" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
        <definition>const FGeographicalEllipsoid &amp; UGeographicalMathLibrary::Ellipsoid</definition>
        <argsstring></argsstring>
        <name>Ellipsoid</name>
        <qualifiedname>UGeographicalMathLibrary::Ellipsoid</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="84" column="80" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_u_geographical_math_library_1a273f52400afe7ce253daed0bd8c699e6" prot="public" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UObject *</type>
        <definition>const FGeographicalEllipsoid const UObject * UGeographicalMathLibrary::WorldContext</definition>
        <argsstring></argsstring>
        <name>WorldContext</name>
        <qualifiedname>UGeographicalMathLibrary::WorldContext</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="85" column="65" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_u_geographical_math_library_1ae3a996d625f1b4d49ccff645a5f9cd9c" prot="public" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UObject bool</type>
        <definition>const FGeographicalEllipsoid const UObject bool UGeographicalMathLibrary::bIgnoreCollisions</definition>
        <argsstring></argsstring>
        <name>bIgnoreCollisions</name>
        <qualifiedname>UGeographicalMathLibrary::bIgnoreCollisions</qualifiedname>
        <initializer>= <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">false</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="86" column="56" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_u_geographical_math_library_1ae8b8c87f24bda2d6afbb2a3f1494fbc7" prot="public" static="no" mutable="no">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UObject bool <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">ECollisionChannel</ref></type>
        <definition>const FGeographicalEllipsoid const UObject bool ECollisionChannel UGeographicalMathLibrary::CollisionChannel</definition>
        <argsstring></argsstring>
        <name>CollisionChannel</name>
        <qualifiedname>UGeographicalMathLibrary::CollisionChannel</qualifiedname>
        <initializer>= <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">ECC_Visibility</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="87" column="69" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" bodystart="87" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_u_geographical_math_library_1ae93ed068a9371808af7ef9c2832f1e28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref></type>
        <definition>FVector UGeographicalMathLibrary::CalculateSurfaceNormal</definition>
        <argsstring>(const FVector &amp;Target, const FGeographicalEllipsoid &amp;Ellipsoid)</argsstring>
        <name>CalculateSurfaceNormal</name>
        <qualifiedname>UGeographicalMathLibrary::CalculateSurfaceNormal</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>Target</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
          <declname>Ellipsoid</declname>
        </param>
        <briefdescription>
<para>Рассчитать вектор нормали касательной поверхности. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Target</parametername>
</parameternamelist>
<parameterdescription>
<para>Целевое местоположение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Эллипсоид. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="36" column="24" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Private/GeographicalMathLibrary.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="class_u_geographical_math_library_1a38c2586a05dabd954e096b7b9194f0e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FQuat</ref></type>
        <definition>FQuat UGeographicalMathLibrary::CalculateSurfaceNormalRotation</definition>
        <argsstring>(const FVector &amp;Target, const FGeographicalEllipsoid &amp;Ellipsoid)</argsstring>
        <name>CalculateSurfaceNormalRotation</name>
        <qualifiedname>UGeographicalMathLibrary::CalculateSurfaceNormalRotation</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>Target</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
          <declname>Ellipsoid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Рассчитать поворот от вектора мировой верхней оси к вектору нормали касательной поверхности.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Target</parametername>
</parameternamelist>
<parameterdescription>
<para>Целевое местоположение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Эллипсоид. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="45" column="22" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Private/GeographicalMathLibrary.cpp" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="class_u_geographical_math_library_1af754ded35037e622447b545ddd96004b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FHitResult</ref></type>
        <definition>FHitResult UGeographicalMathLibrary::LineTraceAlongNormalAxis</definition>
        <argsstring>(const FVector &amp;Target, const FGeographicalEllipsoid &amp;Ellipsoid, const UObject *WorldContext, ECollisionChannel CollisionChannel=ECC_Visibility)</argsstring>
        <name>LineTraceAlongNormalAxis</name>
        <qualifiedname>UGeographicalMathLibrary::LineTraceAlongNormalAxis</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>Target</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
          <declname>Ellipsoid</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UObject *</type>
          <declname>WorldContext</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">ECollisionChannel</ref></type>
          <declname>CollisionChannel</declname>
          <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">ECC_Visibility</ref></defval>
        </param>
        <briefdescription>
<para>Выполнить трассировку линии вдоль нормальной оси. </para>
        </briefdescription>
        <detaileddescription>
<para>Это делает следующее:<orderedlist>
<listitem><para>Выполняет трассировку линии в направлении центра сферы. Если найдено блокирующее столкновение, прекращает выполнение и возвращает результат.</para>
</listitem><listitem><para>Выполняет трассировку линии в сторону данного местоположения с длиной, равной радиусу сферы.</para>
</listitem></orderedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Target</parametername>
</parameternamelist>
<parameterdescription>
<para>Целевое местоположение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Соответствующий эллипсоид. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WorldContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст мира, в котором выполняется трассировка линии. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CollisionChannel</parametername>
</parameternamelist>
<parameterdescription>
<para>Канал столкновения для тестирования.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Результат трассировки линии. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="64" column="27" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Private/GeographicalMathLibrary.cpp" bodystart="21" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_u_geographical_math_library_1aa40557167141a40ccf4da0e82213ad09" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_f_ray_ellipsoid_intersections" kindref="compound">FRayEllipsoidIntersections</ref></type>
        <definition>FRayEllipsoidIntersections UGeographicalMathLibrary::CalculateRayEllipsoidIntersections</definition>
        <argsstring>(const FRay &amp;Ray, const FGeographicalEllipsoid &amp;Ellipsoid, bool bAllowReverseDirection=false)</argsstring>
        <name>CalculateRayEllipsoidIntersections</name>
        <qualifiedname>UGeographicalMathLibrary::CalculateRayEllipsoidIntersections</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FRay</ref> &amp;</type>
          <declname>Ray</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
          <declname>Ellipsoid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAllowReverseDirection</declname>
          <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">false</ref></defval>
        </param>
        <briefdescription>
<para>Рассчитать пересечения луча с эллипсоидом. </para>
        </briefdescription>
        <detaileddescription>
<para>Если параметр <computeroutput>bAllowReverseDirection</computeroutput> установлен в <computeroutput>false</computeroutput>, то те точки пересечения, которые соответствуют отрицательным значениям параметров луча, не будут возвращены, вместо этого в их месте будет возвращено значение <computeroutput>NullOpt</computeroutput>.</para>
<para>Если луч касается поверхности эллипсоида, то две возвращенные точки будут идентичными.</para>
<para>Если луч не пересекает эллипсоид, то пара будет содержать только <computeroutput>NullOpt</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ray</parametername>
</parameternamelist>
<parameterdescription>
<para>Луч для пересечения с сферой. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Эллипсоид для пересечения с лучом. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bAllowReverseDirection</parametername>
</parameternamelist>
<parameterdescription>
<para>Возвращать или нет точки пересечения, соответствующие отрицательным значениям параметров луча.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пересечения луча и эллипсоида.</para>
</simplesect>
<simplesect kind="note"><para>Это предполагает, что <computeroutput>Ray.Direction</computeroutput> нормализован.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_f_ray_ellipsoid_intersections" kindref="compound">FRayEllipsoidIntersections</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="111" column="43" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Private/GeographicalMathLibrary.cpp" bodystart="78" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="class_u_geographical_math_library_1a2d5e2810d837176b965c9d4b281b44b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UGeographicalMathLibrary::K2_CalculateRayEllipsoidIntersections</definition>
        <argsstring>(const FRay &amp;Ray, const FGeographicalEllipsoid &amp;Ellipsoid, FVector &amp;Near, bool &amp;bNearSet, FVector &amp;Far, bool &amp;bFarSet)</argsstring>
        <name>K2_CalculateRayEllipsoidIntersections</name>
        <qualifiedname>UGeographicalMathLibrary::K2_CalculateRayEllipsoidIntersections</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FRay</ref> &amp;</type>
          <declname>Ray</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
          <declname>Ellipsoid</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>Near</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>bNearSet</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>Far</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>bFarSet</declname>
        </param>
        <briefdescription>
<para>Рассчитать пересечения данного луча с эллипсоидом. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ray</parametername>
</parameternamelist>
<parameterdescription>
<para>Луч для пересечения с сферой. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Эллипсоид для пересечения с лучом. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Near</parametername>
</parameternamelist>
<parameterdescription>
<para>Точка пересечения ближе к началу луча. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bNearSet</parametername>
</parameternamelist>
<parameterdescription>
<para>Была ли установлена ближняя точка. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Far</parametername>
</parameternamelist>
<parameterdescription>
<para>Точки пересечения дальше от начала луча. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bFarSet</parametername>
</parameternamelist>
<parameterdescription>
<para>Была ли установлена дальняя точка.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Пересечения луча и эллипсоида.</para>
</simplesect>
<simplesect kind="note"><para>Это предполагает, что <computeroutput>Ray.Direction</computeroutput> нормализован.</para>
</simplesect>
<simplesect kind="see"><para>UGeographicalMathFunctionLibrary::CalculateRayEllipsoidIntersections </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="132" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Private/GeographicalMathLibrary.cpp" bodystart="117" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="class_u_geographical_math_library_1a3319099c9f15133a4c7b25ff4c66e377" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref></type>
        <definition>FVector UGeographicalMathLibrary::AddConcentricOffset</definition>
        <argsstring>(const FVector &amp;Target, const FGeographicalEllipsoid &amp;Ellipsoid, const FVector &amp;DenormalizedOffset)</argsstring>
        <name>AddConcentricOffset</name>
        <qualifiedname>UGeographicalMathLibrary::AddConcentricOffset</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>Target</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
          <declname>Ellipsoid</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>DenormalizedOffset</declname>
        </param>
        <briefdescription>
<para>Добавить концентрический сдвиг к данному местоположению. </para>
        </briefdescription>
        <detaileddescription>
<para>Это добавляет данный сдвиг, сохраняя высоту цели над поверхностью.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Target</parametername>
</parameternamelist>
<parameterdescription>
<para>Целевое местоположение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Соответствующий эллипсоид. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DenormalizedOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Начальное денормализованное значение сдвига. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="168" column="24" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Private/GeographicalMathLibrary.cpp" bodystart="145" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_u_geographical_math_library_1a192c98ac5c29b3403ed85dbc2e0ed398" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref></type>
        <definition>FVector UGeographicalMathLibrary::CalculateNorthDirection</definition>
        <argsstring>(const FVector &amp;Origin, const FGeographicalEllipsoid &amp;Ellipsoid)</argsstring>
        <name>CalculateNorthDirection</name>
        <qualifiedname>UGeographicalMathLibrary::CalculateNorthDirection</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FVector</ref> &amp;</type>
          <declname>Origin</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="struct_f_geographical_ellipsoid" kindref="compound">FGeographicalEllipsoid</ref> &amp;</type>
          <declname>Ellipsoid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="174" column="24" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Private/GeographicalMathLibrary.cpp" bodystart="156" bodyend="163"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_u_geographical_math_library_1a9834d73b03a351799c8393ae7cd93e10" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type></type>
        <definition>UGeographicalMathLibrary::UFUNCTION</definition>
        <argsstring>(BlueprintPure, Category=&quot;GeographicalMath|Surfaces&quot;, Meta=(NotBlueprintThreadSafe, CallableWithoutWorldContext, WorldContext=&quot;WorldContext&quot;)) static FVector FindCoaxialSurfaceLocation(const FVector &amp;Target</argsstring>
        <name>UFUNCTION</name>
        <qualifiedname>UGeographicalMathLibrary::UFUNCTION</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">BlueprintPure</ref></type>
        </param>
        <param>
          <type>Category</type>
          <defval>&quot;GeographicalMath|<ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">Surfaces&quot;</ref></defval>
        </param>
        <param>
          <type>Meta</type>
          <defval>(<ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">NotBlueprintThreadSafe</ref>, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">CallableWithoutWorldContext</ref>, <ref refid="class_u_geographical_math_library_1a273f52400afe7ce253daed0bd8c699e6" kindref="member">WorldContext</ref>=&quot;WorldContext&quot;)</defval>
        </param>
        <briefdescription>
<para>Найти местоположение поверхности, коаксиальной целевому местоположению. </para>
        </briefdescription>
        <detaileddescription>
<para>Это фактически устанавливает высоту цели над поверхностью в ноль.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Target</parametername>
</parameternamelist>
<parameterdescription>
<para>Целевое местоположение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Соответствующий эллипсоид. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WorldContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст мира для тестирования столкновений. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bIgnoreCollisions</parametername>
</parameternamelist>
<parameterdescription>
<para>Игнорировать столкновения или нет. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CollisionChannel</parametername>
</parameternamelist>
<parameterdescription>
<para>Канал столкновения для тестирования, если <computeroutput>bIgnoreCollisions</computeroutput> равно <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="80" column="9"/>
      </memberdef>
      <memberdef kind="function" id="class_u_geographical_math_library_1a742ddc524de1b303f6e41ec337006fea" prot="public" static="no" const="yes" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <type></type>
        <definition>UGeographicalMathLibrary::UFUNCTION</definition>
        <argsstring>(BlueprintPure, Category=&quot;GeographicalMath|Heights&quot;, Meta=(NotBlueprintThreadSafe, CallableWithoutWorldContext, WorldContext=&quot;WorldContext&quot;)) static double CalculateHeightAboveSurface(const FVector &amp;Target</argsstring>
        <name>UFUNCTION</name>
        <qualifiedname>UGeographicalMathLibrary::UFUNCTION</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">BlueprintPure</ref></type>
        </param>
        <param>
          <type>Category</type>
          <defval>&quot;GeographicalMath|<ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">Heights&quot;</ref></defval>
        </param>
        <param>
          <type>Meta</type>
          <defval>(<ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">NotBlueprintThreadSafe</ref>, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">CallableWithoutWorldContext</ref>, <ref refid="class_u_geographical_math_library_1a273f52400afe7ce253daed0bd8c699e6" kindref="member">WorldContext</ref>=&quot;WorldContext&quot;)</defval>
        </param>
        <briefdescription>
<para>Рассчитать высоту над поверхностью в данной точке. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Target</parametername>
</parameternamelist>
<parameterdescription>
<para>Целевое местоположение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ellipsoid</parametername>
</parameternamelist>
<parameterdescription>
<para>Соответствующий эллипсоид. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>WorldContext</parametername>
</parameternamelist>
<parameterdescription>
<para>Контекст мира для расчета высоты цели в нем. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bIgnoreCollisions</parametername>
</parameternamelist>
<parameterdescription>
<para>Игнорировать столкновения или нет. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CollisionChannel</parametername>
</parameternamelist>
<parameterdescription>
<para>Канал столкновения для тестирования, если <computeroutput>bIgnoreCollisions</computeroutput> равно <computeroutput>false</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="148" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>UBlueprintFunctionLibrary</label>
      </node>
      <node id="1">
        <label>UGeographicalMathLibrary</label>
        <link refid="class_u_geographical_math_library"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>FGeographicalEllipsoid</label>
        <link refid="struct_f_geographical_ellipsoid"/>
      </node>
      <node id="2">
        <label>UBlueprintFunctionLibrary</label>
      </node>
      <node id="1">
        <label>UGeographicalMathLibrary</label>
        <link refid="class_u_geographical_math_library"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>CollisionChannel</edgelabel>
          <edgelabel>Ellipsoid</edgelabel>
          <edgelabel>WorldContext</edgelabel>
          <edgelabel>bIgnoreCollisions</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" line="24" column="1" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/GeographicalMath/Source/GeographicalMath/Public/GeographicalMathLibrary.h" bodystart="25" bodyend="176"/>
    <listofallmembers>
      <member refid="class_u_geographical_math_library_1a3319099c9f15133a4c7b25ff4c66e377" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>AddConcentricOffset</name></member>
      <member refid="class_u_geographical_math_library_1ae3a996d625f1b4d49ccff645a5f9cd9c" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>bIgnoreCollisions</name></member>
      <member refid="class_u_geographical_math_library_1a192c98ac5c29b3403ed85dbc2e0ed398" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>CalculateNorthDirection</name></member>
      <member refid="class_u_geographical_math_library_1aa40557167141a40ccf4da0e82213ad09" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>CalculateRayEllipsoidIntersections</name></member>
      <member refid="class_u_geographical_math_library_1ae93ed068a9371808af7ef9c2832f1e28" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>CalculateSurfaceNormal</name></member>
      <member refid="class_u_geographical_math_library_1a38c2586a05dabd954e096b7b9194f0e0" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>CalculateSurfaceNormalRotation</name></member>
      <member refid="class_u_geographical_math_library_1ae8b8c87f24bda2d6afbb2a3f1494fbc7" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>CollisionChannel</name></member>
      <member refid="class_u_geographical_math_library_1a75fc7075b3c7f74e86ee661dde6f4af7" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>Ellipsoid</name></member>
      <member refid="class_u_geographical_math_library_1a2d5e2810d837176b965c9d4b281b44b5" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>K2_CalculateRayEllipsoidIntersections</name></member>
      <member refid="class_u_geographical_math_library_1af754ded35037e622447b545ddd96004b" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>LineTraceAlongNormalAxis</name></member>
      <member refid="class_u_geographical_math_library_1a9834d73b03a351799c8393ae7cd93e10" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>UFUNCTION</name></member>
      <member refid="class_u_geographical_math_library_1a742ddc524de1b303f6e41ec337006fea" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>UFUNCTION</name></member>
      <member refid="class_u_geographical_math_library_1a273f52400afe7ce253daed0bd8c699e6" prot="public" virt="non-virtual"><scope>UGeographicalMathLibrary</scope><name>WorldContext</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
