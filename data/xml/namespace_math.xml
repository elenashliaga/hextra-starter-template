<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="ru">
  <compounddef id="namespace_math" kind="namespace" language="C++">
    <compoundname>Math</compoundname>
    <innerclass refid="struct_math_1_1_t_ray_sphere_intersections" prot="public">Math::TRaySphereIntersections</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespace_math_1ac420720c6d89bbac3f4b589395a6e298" prot="public" static="no">
        <type><ref refid="struct_math_1_1_t_ray_sphere_intersections" kindref="compound">TRaySphereIntersections</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">double</ref> &gt;</type>
        <definition>using Math::FRaySphereIntersections = typedef TRaySphereIntersections&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>FRaySphereIntersections</name>
        <qualifiedname>Math::FRaySphereIntersections</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Linear.h" line="26" column="9" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Linear.h" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespace_math_1a0ff8c6004c0db74142808f45a56efe98" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::qualifier</ref></type>
            <declname>Q</declname>
            <defname>Q</defname>
            <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::defaultp</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">constexpr</ref> glm::vec&lt; 3, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref>, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">Q</ref> &gt;</type>
        <definition>constexpr glm::vec&lt; 3, U, Q &gt; Math::Cast</definition>
        <argsstring>(const UE::Math::TVector&lt; V &gt; &amp;Vec)</argsstring>
        <name>Cast</name>
        <qualifiedname>Math::Cast</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UE::Math::TVector&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref> &gt; &amp;</type>
          <declname>Vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" line="15" column="28" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1a02f43ee2cbb955258d04d7f1834ff58b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::qualifier</ref></type>
            <declname>Q</declname>
            <defname>Q</defname>
            <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::defaultp</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">constexpr</ref> UE::Math::TVector&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref> &gt;</type>
        <definition>constexpr UE::Math::TVector&lt; U &gt; Math::Cast</definition>
        <argsstring>(const glm::vec&lt; 3, V, Q &gt; &amp;Vec)</argsstring>
        <name>Cast</name>
        <qualifiedname>Math::Cast</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> glm::vec&lt; 3, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref>, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">Q</ref> &gt; &amp;</type>
          <declname>Vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" line="21" column="37" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1ae6f4ff130bc295122ad48d7a9688d92d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::qualifier</ref></type>
            <declname>Q</declname>
            <defname>Q</defname>
            <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::defaultp</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">constexpr</ref> glm::qua&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref>, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">Q</ref> &gt;</type>
        <definition>constexpr glm::qua&lt; V, Q &gt; Math::Cast</definition>
        <argsstring>(const UE::Math::TQuat&lt; U &gt; &amp;Quat)</argsstring>
        <name>Cast</name>
        <qualifiedname>Math::Cast</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UE::Math::TQuat&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref> &gt; &amp;</type>
          <declname>Quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" line="27" column="28" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1aaf187b3c8091275de5304dbb73ee36a4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref></type>
          </param>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::qualifier</ref></type>
            <declname>Q</declname>
            <defname>Q</defname>
            <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">glm::defaultp</ref></defval>
          </param>
        </templateparamlist>
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">constexpr</ref> UE::Math::TQuat&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">U</ref> &gt;</type>
        <definition>constexpr UE::Math::TQuat&lt; U &gt; Math::Cast</definition>
        <argsstring>(const glm::qua&lt; V, Q &gt; &amp;Quat)</argsstring>
        <name>Cast</name>
        <qualifiedname>Math::Cast</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> glm::qua&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">V</ref>, <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">Q</ref> &gt; &amp;</type>
          <declname>Quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" line="33" column="35" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1af7d774b0798984cabec58eeb7174ea81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> ValueType</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_math_1_1_t_ray_sphere_intersections" kindref="compound">TRaySphereIntersections</ref>&lt; ValueType &gt;</type>
        <definition>TRaySphereIntersections&lt; ValueType &gt; Math::RaySphereIntersections</definition>
        <argsstring>(const UE::Math::TRay&lt; ValueType &gt; &amp;Ray, const UE::Math::TSphere&lt; ValueType &gt; &amp;Sphere, bool bAllowNegativeRayParam=false)</argsstring>
        <name>RaySphereIntersections</name>
        <qualifiedname>Math::RaySphereIntersections</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UE::Math::TRay&lt; ValueType &gt; &amp;</type>
          <declname>Ray</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> UE::Math::TSphere&lt; ValueType &gt; &amp;</type>
          <declname>Sphere</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAllowNegativeRayParam</declname>
          <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">false</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find intersections of a ray with a sphere.</para>
<para>If <computeroutput>bAllowNegativeRayParam</computeroutput> is set to <computeroutput>false</computeroutput>, then those intersection points that correspond to negative ray parameters will not be returned, instead, <computeroutput>NullOpt</computeroutput> will be returned in their place.</para>
<para>If the ray is tangent to the surface of the sphere, then the two returned points will be identical.</para>
<para>If the ray doesn&apos;t intersect the sphere, then the pair will contain only <computeroutput>NullOpt</computeroutput>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>Value type of associated math types.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Ray</parametername>
</parameternamelist>
<parameterdescription>
<para>Ray to intersect a sphere with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Sphere</parametername>
</parameternamelist>
<parameterdescription>
<para>Sphere to intersect a ray with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bAllowNegativeRayParam</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to return intersection points that correspond to negative ray parameters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Ray-sphere intersections.</para>
</simplesect>
<simplesect kind="note"><para>This assumes <computeroutput>Ray.Direction</computeroutput> to be normalized.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="struct_math_1_1_t_ray_sphere_intersections" kindref="compound">TRaySphereIntersections</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Linear.h" line="55" column="33" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Linear.h" bodystart="55" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespace_math_1abdee34d9f847a80acf983b19ea62e056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">typename</ref> ValueType</type>
          </param>
        </templateparamlist>
        <type>TVector&lt; ValueType &gt;</type>
        <definition>TVector&lt; ValueType &gt; Math::RotateAroundOrigin</definition>
        <argsstring>(const TVector&lt; ValueType &gt; &amp;Position, const TVector&lt; ValueType &gt; &amp;Origin, const TQuat&lt; ValueType &gt; &amp;Rotation)</argsstring>
        <name>RotateAroundOrigin</name>
        <qualifiedname>Math::RotateAroundOrigin</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> TVector&lt; ValueType &gt; &amp;</type>
          <declname>Position</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> TVector&lt; ValueType &gt; &amp;</type>
          <declname>Origin</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> TQuat&lt; ValueType &gt; &amp;</type>
          <declname>Rotation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Rot.h" line="15" column="29" bodyfile="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Rot.h" bodystart="15" bodyend="20"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/agnessa/Desktop/work/meta_core/Source/MetaMoscow/Private/Core/Utilities/Math/Conv.h" line="12" column="1"/>
  </compounddef>
</doxygen>
