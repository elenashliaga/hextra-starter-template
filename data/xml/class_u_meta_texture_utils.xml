<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="ru">
  <compounddef id="class_u_meta_texture_utils" kind="class" language="C++" prot="public">
    <compoundname>UMetaTextureUtils</compoundname>
    <basecompoundref prot="public" virt="non-virtual">UBlueprintFunctionLibrary</basecompoundref>
    <includes refid="_meta_texture_utils_8h" local="no">MetaTextureUtils.h</includes>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_u_meta_texture_utils_1a351d1cb9e763d8115398bae46c0ce6d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">void</ref></type>
        <definition>void UMetaTextureUtils::GetMaterialTexture</definition>
        <argsstring>(UMaterialInterface *Material, TArray&lt; UTexture * &gt; &amp;OutTextures, bool bAllQualityLevels, bool bAllFeatureLevels)</argsstring>
        <name>GetMaterialTexture</name>
        <qualifiedname>UMetaTextureUtils::GetMaterialTexture</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UMaterialInterface</ref> *</type>
          <declname>Material</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UTexture</ref> * &gt; &amp;</type>
          <declname>OutTextures</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAllQualityLevels</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bAllFeatureLevels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Извлекает все текстуры, используемые в материале, и сохраняет их в выходном массиве.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Material</parametername>
</parameternamelist>
<parameterdescription>
<para>Интерфейс материала, из которого следует извлечь текстуры. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutTextures</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив, в котором будут храниться извлеченные текстуры. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bAllQualityLevels</parametername>
</parameternamelist>
<parameterdescription>
<para>Указывает, следует ли извлекать текстуры для всех уровней качества. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bAllFeatureLevels</parametername>
</parameternamelist>
<parameterdescription>
<para>Указывает, следует ли извлекать текстуры для всех уровней особенностей.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Эта функция извлекает текстуры, используемые материалом, на основе указанных уровней качества и особенностей. Если bAllQualityLevels истинно, она извлекает текстуры для всех уровней качества. Если bAllFeatureLevels истинно, она извлекает текстуры для всех уровней особенностей.</para>
</simplesect>
<simplesect kind="see"><para>UMaterialInterface::GetUsedTextures() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="35" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_u_meta_texture_utils_1a22ac9132098479d1b3969e6f59248f34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UTexture2D</ref> *</type>
        <definition>UTexture2D * UMetaTextureUtils::Base64_ToImage</definition>
        <argsstring>(const FString &amp;Source, const TEnumAsByte&lt; TextureFilter &gt; &amp;Filter=TF_Nearest)</argsstring>
        <name>Base64_ToImage</name>
        <qualifiedname>UMetaTextureUtils::Base64_ToImage</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref> &amp;</type>
          <declname>Source</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TEnumAsByte</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TextureFilter</ref> &gt; &amp;</type>
          <declname>Filter</declname>
          <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TF_Nearest</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Преобразует строку в кодировке Base64 в изображение UTexture2D.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Source</parametername>
</parameternamelist>
<parameterdescription>
<para>Строка в кодировке Base64, представляющая изображение. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Режим фильтрации. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Изображение UTexture2D, преобразованное из строки Base64, или nullptr, если преобразование не удалось. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="45" column="27" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="26" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="class_u_meta_texture_utils_1a2b67fb61af92e32c665d2f1bc9ad3534" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">FString</ref></type>
        <definition>FString UMetaTextureUtils::ConvertTextureToBase64</definition>
        <argsstring>(UTexture2D *Texture)</argsstring>
        <name>ConvertTextureToBase64</name>
        <qualifiedname>UMetaTextureUtils::ConvertTextureToBase64</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UTexture2D</ref> *</type>
          <declname>Texture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Преобразует данную текстуру в строку, закодированную в формате Base64.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Texture</parametername>
</parameternamelist>
<parameterdescription>
<para>Текстура, которую следует преобразовать. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Строковое представление текстуры, закодированное в формате Base64. Если преобразование не удалось, возвращается пустая строка. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="54" column="24" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="75" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="class_u_meta_texture_utils_1a52f20075d5bd1a431d5c04255e4f6b5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UTexture2D</ref> *</type>
        <definition>UTexture2D * UMetaTextureUtils::ByteArrayToTexture2D</definition>
        <argsstring>(const TArray&lt; uint8 &gt; &amp;ByteArray)</argsstring>
        <name>ByteArrayToTexture2D</name>
        <qualifiedname>UMetaTextureUtils::ByteArrayToTexture2D</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>ByteArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Конвертирование массива байтов в объект Texture2D.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ByteArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив байтов для конвертации. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Созданный из массива байтов объект Texture2D, или nullptr, если конвертация не удалась. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="63" column="27" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="130" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="class_u_meta_texture_utils_1a793107d8347fa4f72def02d680248493" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">EImageFormat</ref></type>
        <definition>EImageFormat UMetaTextureUtils::GetImageFormat</definition>
        <argsstring>(const TArray&lt; uint8 &gt; &amp;FileBuffer)</argsstring>
        <name>GetImageFormat</name>
        <qualifiedname>UMetaTextureUtils::GetImageFormat</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>FileBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Определение формата изображения</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FileBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив байтов, в котором анализируется заголовок </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Вычисленный тип изображения </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="71" column="29" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="109" bodyend="128"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_u_meta_texture_utils_1a900a29fe7a5fcf349b6d8b02d99124ea" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UMetaTextureUtils::GetRawTextureData</definition>
        <argsstring>(UTexture2D *Texture, TArray&lt; uint8 &gt; &amp;OutRawData)</argsstring>
        <name>GetRawTextureData</name>
        <qualifiedname>UMetaTextureUtils::GetRawTextureData</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UTexture2D</ref> *</type>
          <declname>Texture</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>OutRawData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Извлекает необработанные данные текстуры из объекта UTexture2D и сохраняет их в выходной массив.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Texture</parametername>
</parameternamelist>
<parameterdescription>
<para>Объект UTexture2D, из которого следует извлечь данные текстуры. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OutRawData</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив, в который будут записаны извлеченные необработанные данные текстуры. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True, если необработанные данные текстуры были успешно извлечены, иначе - false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="81" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="41" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="class_u_meta_texture_utils_1ab7ed0cd9067bfb7fe8d530100c8fde49" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool UMetaTextureUtils::CompressRawDataToPNG</definition>
        <argsstring>(const TArray&lt; uint8 &gt; &amp;RawData, int32 Width, int32 Height, TArray&lt; uint8 &gt; &amp;CompressedData)</argsstring>
        <name>CompressRawDataToPNG</name>
        <qualifiedname>UMetaTextureUtils::CompressRawDataToPNG</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>RawData</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">int32</ref></type>
          <declname>Width</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">int32</ref></type>
          <declname>Height</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">uint8</ref> &gt; &amp;</type>
          <declname>CompressedData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Сжимает необработанные данные в изображение PNG и сохраняет сжатые данные в выходном массиве.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RawData</parametername>
</parameternamelist>
<parameterdescription>
<para>Необработанные данные, которые следует сжать в изображение PNG. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Width</parametername>
</parameternamelist>
<parameterdescription>
<para>Ширина изображения. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Height</parametername>
</parameternamelist>
<parameterdescription>
<para>Высота изображения. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CompressedData</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив, в который будут записаны сжатые данные. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True, если необработанные данные были успешно сжаты в изображение PNG и сжатые данные были сохранены в выходном массиве, иначе - false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="91" column="21" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="61" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="class_u_meta_texture_utils_1a9284452db8abcbc8ec81dce4a3f85d4f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">UTexture2D</ref> *</type>
        <definition>UTexture2D * UMetaTextureUtils::CreateBitTextureAtRuntime</definition>
        <argsstring>(const TArray&lt; uint8 &gt; BGRA8PixelData, const TEnumAsByte&lt; TextureFilter &gt; &amp;Filter=TF_Nearest)</argsstring>
        <name>CreateBitTextureAtRuntime</name>
        <qualifiedname>UMetaTextureUtils::CreateBitTextureAtRuntime</qualifiedname>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TArray</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">uint8</ref> &gt;</type>
          <declname>BGRA8PixelData</declname>
        </param>
        <param>
          <type><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">const</ref> <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TEnumAsByte</ref>&lt; <ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TextureFilter</ref> &gt; &amp;</type>
          <declname>Filter</declname>
          <defval><ref refid="_mass_l_o_d_types_8h_1a640a07441330729796f6bdaba973e7a8a6a061313d22e51e0f25b7cd4dc065233" kindref="member">TF_Nearest</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Конвертирование массива байтов в объект UTexture2D во время выполнения.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>BGRA8PixelData</parametername>
</parameternamelist>
<parameterdescription>
<para>Массив байтов, содержащий данные пикселей BGRA8. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Filter</parametername>
</parameternamelist>
<parameterdescription>
<para>Режим фильтрации. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Созданный из массива байтов объект UTexture2D, или nullptr, если конвертация не удалась. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="100" column="27" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Private/MetaTextureUtils.cpp" bodystart="94" bodyend="107"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>UBlueprintFunctionLibrary</label>
      </node>
      <node id="1">
        <label>UMetaTextureUtils</label>
        <link refid="class_u_meta_texture_utils"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>UBlueprintFunctionLibrary</label>
      </node>
      <node id="1">
        <label>UMetaTextureUtils</label>
        <link refid="class_u_meta_texture_utils"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" line="17" column="1" bodyfile="/home/agnessa/Desktop/work/meta_core/Plugins/META/Code/MetaBaseUtils/Source/MetaBaseUtils/Public/MetaTextureUtils.h" bodystart="18" bodyend="102"/>
    <listofallmembers>
      <member refid="class_u_meta_texture_utils_1a22ac9132098479d1b3969e6f59248f34" prot="public" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>Base64_ToImage</name></member>
      <member refid="class_u_meta_texture_utils_1a52f20075d5bd1a431d5c04255e4f6b5e" prot="public" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>ByteArrayToTexture2D</name></member>
      <member refid="class_u_meta_texture_utils_1ab7ed0cd9067bfb7fe8d530100c8fde49" prot="private" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>CompressRawDataToPNG</name></member>
      <member refid="class_u_meta_texture_utils_1a2b67fb61af92e32c665d2f1bc9ad3534" prot="public" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>ConvertTextureToBase64</name></member>
      <member refid="class_u_meta_texture_utils_1a9284452db8abcbc8ec81dce4a3f85d4f" prot="private" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>CreateBitTextureAtRuntime</name></member>
      <member refid="class_u_meta_texture_utils_1a793107d8347fa4f72def02d680248493" prot="public" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>GetImageFormat</name></member>
      <member refid="class_u_meta_texture_utils_1a351d1cb9e763d8115398bae46c0ce6d7" prot="public" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>GetMaterialTexture</name></member>
      <member refid="class_u_meta_texture_utils_1a900a29fe7a5fcf349b6d8b02d99124ea" prot="private" virt="non-virtual"><scope>UMetaTextureUtils</scope><name>GetRawTextureData</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
